{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"api/","text":"Api documentation # const ui = SwaggerUIBundle({ url: 'swagger.yml', dom_id: '#swagger-ui', })","title":"Api documentation"},{"location":"api/#api-documentation","text":"const ui = SwaggerUIBundle({ url: 'swagger.yml', dom_id: '#swagger-ui', })","title":"Api documentation"},{"location":"Castellano/","text":"Inicio #","title":"Inicio"},{"location":"Castellano/#inicio","text":"","title":"Inicio"},{"location":"Castellano/helpbuttons/","text":"\u00bfQu\u00e9 es HelpButtons? #","title":"\u00bfQu\u00e9 es HelpButtons?"},{"location":"Castellano/helpbuttons/#que-es-helpbuttons","text":"","title":"\u00bfQu\u00e9 es HelpButtons?"},{"location":"Castellano/installation/","text":"Instalaciones de Help Buttons # En GNU/Linux # Referencias seguidas: Documentaci\u00f3n oficial de la instalaci\u00f3n de Ruby on Rails en castellano Documentaci\u00f3n oficial de RVM Para realizar la instalaci\u00f3n de Ruby on Rails (RoR) en Debian o derivados (Ubuntu) existen los siguientes requisitos: RVM PostgreSQL Nodejs Yarn Instalaci\u00f3n de RVM (Ruby Version Manager) # Instalamos los paquetes del sistema operativo requeritos por RVM: sudo apt install -y git-core subversion gnupg2 curl A\u00f1adimos la firma del repositorio de RVM que se puede encontrar en su p\u00e1gina oficial : gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB Instalamos la versi\u00f3n estable de RVM: curl -sSL https://get.rvm.io | bash -s stable --ruby Este comando instala las \u00faltimas versiones estables de rvm, ruby y rails . Al ejecutarlo se devuelve muchos mensajes por pantalla. Una vez finalizado este proceso, RVM nos dice que ejecutemos el siguiente comando o que reiniciemos las shells abiertas. Tambi\u00e9n ejecutaremos este comando en caso de obtener un error diciendo que no se ha encontrado el comando bundle bash: bundle: command not found source /home/$USER/.rvm/scripts/rvm Se comprueba la configuraci\u00f3n de rvm mediante la siguiente orden: type rvm | head -n 1 La cual nos devolver\u00e1 que rvm is a function . En caso de no ser as\u00ed, rvm no est\u00e1 configurado adecuadamente. En tal caso habr\u00e1 que consultar la documentaci\u00f3n en https://rvm.io/rvm/install y solicitar ayuda. A continuaci\u00f3n, comprobamos los comandos: rvm, ruby, irb, gem. rvm list ruby -v irb -v gem -v Instalaci\u00f3n de la versi\u00f3n de ruby del proyecto # Bundle es una gema de ruby que lleva la cuenta e instala las diferentes versiones de las gemas que necesitamos. Ya tenemos el entorno instalado y disponible para trabajar con \u00e9l. Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X Si volvemos a ejecutar el comando bundle install nos aparecer\u00e1 otro error indicando que falta instalar la base de datos PostgreSQL. Instalaci\u00f3n y configuraci\u00f3n de PostgreSQL # Se instalan los paquetes necesarios para la instalaci\u00f3n de PostgreSQL: sudo apt install postgresql postgresql-contrib libpq-dev -y Se levantan el servicio con: systemctl start postgresql systemctl enable postgresql Se abre una consola en PostgreSQL para modificar la contrase\u00f1a del usuario postgres : sudo -i -u postgres psql Se introduce el siguiente mandato para cambiar la contrase\u00f1a: \\password postgres A continuaci\u00f3n, se crea un nuevo usuario de PostgreSQL llamado rails_dev con privilegios para crear una base de datos with createdb y una contrase\u00f1a aq1234567890 (se recomienda cambiarla por otra m\u00e1s robusta, a poder ser generada con KeePassXC o BitWarden) create role hb_dev with createdb login password 'aq1234567890'; Se muestran los usuarios de PostgreSQL con: \\du Escribe exit para salir de la consola de PostgreSQL. Volvemos a ejecutar bundle install para continuar con la instalaci\u00f3n. bundle install Termina la ejecuci\u00f3n sin errores. El siguiente paso ser\u00e1 instalar Nodejs y Yarn. Instalaci\u00f3n de Nodejs y Yarn # Primero instalamos las herramientas de desarrollo para compilar C. sudo apt install gcc g++ make Se instalan los repositorios de Nodejs 14 a trav\u00e9s del siguiente comando: curl -sL https://deb.nodesource.com/setup_14.x | sudo bash - Se instala nodejs mediante la siguiente orden: sudo apt-get install -y nodejs Se comprueba la instalaci\u00f3n de nodejs y npm con: node -v npm -v Se a\u00f1ade la firma y los repositorios de yarn mediante: curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Instalamos yarn: sudo apt update && sudo apt install yarn Ejecuci\u00f3n del proyecto # Hb-backend # Creamos el archivo de configuraci\u00f3n de la base de datos config/database.yml con vim o nano (se recomienda nano en caso de no saber utilizar vim): vim config/database.yml Por defecto, no existir\u00e1 este fichero porque se incluye en el .gitgignore . Por lo tanto, se puede coger una plantilla y a\u00f1adir las siguientes secciones o a\u00f1adir el documento entero como se expone un poco m\u00e1s abajo: - En la secci\u00f3n development , a\u00f1ade la configuraci\u00f3n de PostgreSQL: development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 En la secci\u00f3n testing , a\u00f1ade la configuraci\u00f3n de PostgreSQL: test: <<: *default database: test_project_test host: localhost port: 5432 username: hb_dev password: aq1234567890 Un ejemplo del archivo final de config/database.yml ser\u00e1 el siguiente: default: &default adapter: postgresql encoding: unicode pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %> development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 test: <<: *default database: test_project_test username: hb_dev password: aq1234567890 host: localhost port: 5432 production: <<: *default database: test_project_production username: test_project password: <%= ENV['TEST_PROJECT_DATABASE_PASSWORD'] %> Guarda los cambios y sal del editor. Lo siguiente ser\u00e1 generar el esquema de la base de datos PostgreSQL ejecutando: rake db:setup O alternativamente: rails db:setup rails db:migrate Por \u00faltimo, levanta el servidor en local y accede a la direcci\u00f3n http://localhost:3000/ . rails s Hb-frontend # Instalamos ember glabalmente: npm install -g ember-cli En caso de obtener un error relaciondo con permisos de acceso npm ERR! Error: EACCES, , cambiamos el propietario de la carpeta node_modules de root al usuario actual para poder acceder al directorio: sudo chown -R $USER /usr/lib/node_modules Instalamos las depencias del front: npm install Se sirve el frontend y se accede desde el navegador a la url http://localhost:4200/ : ember s Posibles errores durante la instalaci\u00f3n # Command not found # Bundle : Si al ejecutar bundle install nos devuelve el error bash: bundle: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm Rails : Si al ejecutar rails db:setup nos devuelve el error bash: rails: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm ember : Si al ejecutar ember -v nos devuelve el error bash: ember: command not found ser\u00e1 necesario volver a ejecutar: export PATH=node_modules/.bin:$PATH A\u00f1adirlo al PATH para tener una soluci\u00f3n permanente. Por ejemplo, si se est\u00e1 utilizando bash como consola, se podr\u00e1 incluir los comandos como \u00faltimas l\u00edneas en el archivo .bashrc y posteriormente aplicar los cambios con source .bashrc . Ruby version # Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X","title":"Instalaciones de Help Buttons"},{"location":"Castellano/installation/#instalaciones-de-help-buttons","text":"","title":"Instalaciones de Help Buttons"},{"location":"Castellano/installation/#en-gnulinux","text":"Referencias seguidas: Documentaci\u00f3n oficial de la instalaci\u00f3n de Ruby on Rails en castellano Documentaci\u00f3n oficial de RVM Para realizar la instalaci\u00f3n de Ruby on Rails (RoR) en Debian o derivados (Ubuntu) existen los siguientes requisitos: RVM PostgreSQL Nodejs Yarn","title":"En GNU/Linux"},{"location":"Castellano/installation/#instalacion-de-rvm-ruby-version-manager","text":"Instalamos los paquetes del sistema operativo requeritos por RVM: sudo apt install -y git-core subversion gnupg2 curl A\u00f1adimos la firma del repositorio de RVM que se puede encontrar en su p\u00e1gina oficial : gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB Instalamos la versi\u00f3n estable de RVM: curl -sSL https://get.rvm.io | bash -s stable --ruby Este comando instala las \u00faltimas versiones estables de rvm, ruby y rails . Al ejecutarlo se devuelve muchos mensajes por pantalla. Una vez finalizado este proceso, RVM nos dice que ejecutemos el siguiente comando o que reiniciemos las shells abiertas. Tambi\u00e9n ejecutaremos este comando en caso de obtener un error diciendo que no se ha encontrado el comando bundle bash: bundle: command not found source /home/$USER/.rvm/scripts/rvm Se comprueba la configuraci\u00f3n de rvm mediante la siguiente orden: type rvm | head -n 1 La cual nos devolver\u00e1 que rvm is a function . En caso de no ser as\u00ed, rvm no est\u00e1 configurado adecuadamente. En tal caso habr\u00e1 que consultar la documentaci\u00f3n en https://rvm.io/rvm/install y solicitar ayuda. A continuaci\u00f3n, comprobamos los comandos: rvm, ruby, irb, gem. rvm list ruby -v irb -v gem -v","title":"Instalaci\u00f3n de RVM (Ruby Version Manager)"},{"location":"Castellano/installation/#instalacion-de-la-version-de-ruby-del-proyecto","text":"Bundle es una gema de ruby que lleva la cuenta e instala las diferentes versiones de las gemas que necesitamos. Ya tenemos el entorno instalado y disponible para trabajar con \u00e9l. Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X Si volvemos a ejecutar el comando bundle install nos aparecer\u00e1 otro error indicando que falta instalar la base de datos PostgreSQL.","title":"Instalaci\u00f3n de la versi\u00f3n de ruby del proyecto"},{"location":"Castellano/installation/#instalacion-y-configuracion-de-postgresql","text":"Se instalan los paquetes necesarios para la instalaci\u00f3n de PostgreSQL: sudo apt install postgresql postgresql-contrib libpq-dev -y Se levantan el servicio con: systemctl start postgresql systemctl enable postgresql Se abre una consola en PostgreSQL para modificar la contrase\u00f1a del usuario postgres : sudo -i -u postgres psql Se introduce el siguiente mandato para cambiar la contrase\u00f1a: \\password postgres A continuaci\u00f3n, se crea un nuevo usuario de PostgreSQL llamado rails_dev con privilegios para crear una base de datos with createdb y una contrase\u00f1a aq1234567890 (se recomienda cambiarla por otra m\u00e1s robusta, a poder ser generada con KeePassXC o BitWarden) create role hb_dev with createdb login password 'aq1234567890'; Se muestran los usuarios de PostgreSQL con: \\du Escribe exit para salir de la consola de PostgreSQL. Volvemos a ejecutar bundle install para continuar con la instalaci\u00f3n. bundle install Termina la ejecuci\u00f3n sin errores. El siguiente paso ser\u00e1 instalar Nodejs y Yarn.","title":"Instalaci\u00f3n y configuraci\u00f3n de PostgreSQL"},{"location":"Castellano/installation/#instalacion-de-nodejs-y-yarn","text":"Primero instalamos las herramientas de desarrollo para compilar C. sudo apt install gcc g++ make Se instalan los repositorios de Nodejs 14 a trav\u00e9s del siguiente comando: curl -sL https://deb.nodesource.com/setup_14.x | sudo bash - Se instala nodejs mediante la siguiente orden: sudo apt-get install -y nodejs Se comprueba la instalaci\u00f3n de nodejs y npm con: node -v npm -v Se a\u00f1ade la firma y los repositorios de yarn mediante: curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Instalamos yarn: sudo apt update && sudo apt install yarn","title":"Instalaci\u00f3n de Nodejs y Yarn"},{"location":"Castellano/installation/#ejecucion-del-proyecto","text":"","title":"Ejecuci\u00f3n del proyecto"},{"location":"Castellano/installation/#hb-backend","text":"Creamos el archivo de configuraci\u00f3n de la base de datos config/database.yml con vim o nano (se recomienda nano en caso de no saber utilizar vim): vim config/database.yml Por defecto, no existir\u00e1 este fichero porque se incluye en el .gitgignore . Por lo tanto, se puede coger una plantilla y a\u00f1adir las siguientes secciones o a\u00f1adir el documento entero como se expone un poco m\u00e1s abajo: - En la secci\u00f3n development , a\u00f1ade la configuraci\u00f3n de PostgreSQL: development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 En la secci\u00f3n testing , a\u00f1ade la configuraci\u00f3n de PostgreSQL: test: <<: *default database: test_project_test host: localhost port: 5432 username: hb_dev password: aq1234567890 Un ejemplo del archivo final de config/database.yml ser\u00e1 el siguiente: default: &default adapter: postgresql encoding: unicode pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %> development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 test: <<: *default database: test_project_test username: hb_dev password: aq1234567890 host: localhost port: 5432 production: <<: *default database: test_project_production username: test_project password: <%= ENV['TEST_PROJECT_DATABASE_PASSWORD'] %> Guarda los cambios y sal del editor. Lo siguiente ser\u00e1 generar el esquema de la base de datos PostgreSQL ejecutando: rake db:setup O alternativamente: rails db:setup rails db:migrate Por \u00faltimo, levanta el servidor en local y accede a la direcci\u00f3n http://localhost:3000/ . rails s","title":"Hb-backend"},{"location":"Castellano/installation/#hb-frontend","text":"Instalamos ember glabalmente: npm install -g ember-cli En caso de obtener un error relaciondo con permisos de acceso npm ERR! Error: EACCES, , cambiamos el propietario de la carpeta node_modules de root al usuario actual para poder acceder al directorio: sudo chown -R $USER /usr/lib/node_modules Instalamos las depencias del front: npm install Se sirve el frontend y se accede desde el navegador a la url http://localhost:4200/ : ember s","title":"Hb-frontend"},{"location":"Castellano/installation/#posibles-errores-durante-la-instalacion","text":"","title":"Posibles errores durante la instalaci\u00f3n"},{"location":"Castellano/installation/#command-not-found","text":"Bundle : Si al ejecutar bundle install nos devuelve el error bash: bundle: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm Rails : Si al ejecutar rails db:setup nos devuelve el error bash: rails: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm ember : Si al ejecutar ember -v nos devuelve el error bash: ember: command not found ser\u00e1 necesario volver a ejecutar: export PATH=node_modules/.bin:$PATH A\u00f1adirlo al PATH para tener una soluci\u00f3n permanente. Por ejemplo, si se est\u00e1 utilizando bash como consola, se podr\u00e1 incluir los comandos como \u00faltimas l\u00edneas en el archivo .bashrc y posteriormente aplicar los cambios con source .bashrc .","title":"Command not found"},{"location":"Castellano/installation/#ruby-version","text":"Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X","title":"Ruby version"},{"location":"English/","text":"Home #","title":"Home"},{"location":"English/#home","text":"","title":"Home"},{"location":"English/functionality/","text":"HelpButtons functionality # Backend # Register Username Email / phone Password Confirmed email Login Username / phone Password Logout Password Recovery New Password Confirm new Password Tag creation Tag Name Tag search Name Button creation Net Type Tags Description Location Date Images Button destruction Button activation/deactivation Button edition Net Type Tags Description Location Date Images Block Button Share Button Net Creator User Name Type Tags Description Location Date Images Button transfer Username / email Start Chat Send Message Send file Erase Chat Interest Tag Creation Tag Name Tag search Name Nets Button Type User edition Name Username Password Language tags Blocked Users Supported Users Interests tags User position tracking User destruction Block User general Username Block User in Net Username Net Notify interests User Id UserName Interest Id Button type Max Distance of Button to User position Notify message UserName Interest Id Button type Share Button UserName Interest Id Button type Button search By tag Tagname By Location Location Name Lat Lng By Date Button Date Button filter By type ... Any filter depending on Net Type (Modules) Tag Search Tag seach Name Tag Id Set Net Admins Set Net Admin User Support User Net creation Net edition Net destruction Send email notifications Interest button created Cancel email notifications Send push notifications Cancel push notifications Frontend # Register Login Logout Password Recovery Button creation Button destruction Button activation/deactivation Button edition User edition User position tracking User destruction Net creation Net edition Net destruction Send email notifications Send push notifications","title":"HelpButtons functionality"},{"location":"English/functionality/#helpbuttons-functionality","text":"","title":"HelpButtons functionality"},{"location":"English/functionality/#backend","text":"Register Username Email / phone Password Confirmed email Login Username / phone Password Logout Password Recovery New Password Confirm new Password Tag creation Tag Name Tag search Name Button creation Net Type Tags Description Location Date Images Button destruction Button activation/deactivation Button edition Net Type Tags Description Location Date Images Block Button Share Button Net Creator User Name Type Tags Description Location Date Images Button transfer Username / email Start Chat Send Message Send file Erase Chat Interest Tag Creation Tag Name Tag search Name Nets Button Type User edition Name Username Password Language tags Blocked Users Supported Users Interests tags User position tracking User destruction Block User general Username Block User in Net Username Net Notify interests User Id UserName Interest Id Button type Max Distance of Button to User position Notify message UserName Interest Id Button type Share Button UserName Interest Id Button type Button search By tag Tagname By Location Location Name Lat Lng By Date Button Date Button filter By type ... Any filter depending on Net Type (Modules) Tag Search Tag seach Name Tag Id Set Net Admins Set Net Admin User Support User Net creation Net edition Net destruction Send email notifications Interest button created Cancel email notifications Send push notifications Cancel push notifications","title":"Backend"},{"location":"English/functionality/#frontend","text":"Register Login Logout Password Recovery Button creation Button destruction Button activation/deactivation Button edition User edition User position tracking User destruction Net creation Net edition Net destruction Send email notifications Send push notifications","title":"Frontend"},{"location":"English/helpbuttons/","text":"What is HelpButtons? #","title":"What is HelpButtons?"},{"location":"English/helpbuttons/#what-is-helpbuttons","text":"","title":"What is HelpButtons?"},{"location":"English/installation/","text":"Help Buttons installations # On GNU/Linux # References followed: Official Ruby on Rails installation documentation in English Official RVM documentation To install Ruby on Rails (RoR) on Debian or derivatives (Ubuntu) there are the following requirements: RVM PostgreSQL Nodejs Yarn RVM (Ruby Version Manager) Installation # We install the operating system packages required by RVM: sudo apt install -y git-core subversion gnupg2 curl Add the signature of the RVM repository that can be found on its official website : gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB We install the stable version of RVM: curl -sSL https://get.rvm.io | bash -s stable --ruby This command installs the latest stable versions of rvm, ruby and rails . When executed, it returns many messages on the screen. Once this process is finished, RVM tells us to run the next command or to restart the open shells. We will also run this command in case we get an error saying that the bundle command has not been found bash: bundle: command not found source /home/$USER/.rvm/scripts/rvm The rvm configuration is checked using the following command: type rvm | head -n 1 Which will return that rvm is a function . If this is not the case, rvm is not properly configured. In such a case you should consult the documentation at https://rvm.io/rvm/install and ask for help. Next, we check the commands: rvm, ruby, irb, gem. rvm list ruby -v irb -v gem -v Installing the ruby version of the project # Bundle is a ruby gem that keeps track and installs the different versions of the gems we need. We now have the environment installed and available to work with. When we try to install the bundle with the command below, we will probably encounter an error Your Ruby version is Y.Y.Y.Y, but your Gemfile specified X.X.X.X . bundle install To resolve this, you need to install and use the appropriate X.X.X. version. rvm install X.X.X rvm use X.X.X If we run the bundle install command again we will get another error indicating that the PostgreSQL database is missing. Installation and Configuration of PostgreSQL # The packages required for PostgreSQL installation are installed: sudo apt install postgresql postgresql-contrib libpq-dev -y The service is lifted with: systemctl start postgresql systemctl enable postgresql Open a PostgreSQL console to modify the password of the user postgres : sudo -i -u postgres psql The following command is entered to change the password: \\password postgres Next, a new PostgreSQL user named `rails_dev is created with privileges to create a database with createdb and a password aq1234567890 (it is recommended to change it to a stronger one, ideally generated with KeePassXC or BitWarden) create role hb_dev with createdb login password `aq1234567890`; PostgreSQL users are shown with: \\\u00fe Type exit to exit the PostgreSQL console. Run `bundle install again to continue with the installation. bundle install It finishes the execution without errors. The next step is to install Nodejs and Yarn. Installation of Nodejs and Yarn # First we install the development tools for compiling C. sudo apt install gcc g++ make The Nodejs 14 repositories are installed via the following command: curl -sL https://deb.nodesource.com/setup_14.x | sudo bash - Nodejs is installed via the following command: sudo apt-get install -y nodejs Check nodejs and npm installation with: node -v npm -v The signature and yarn repositories are added using: curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Install yarn: sudo apt update && sudo apt install yarn Running the project # Hb-backend # We create the database configuration file config/database.yml with vim or nano (nano is recommended in case you don't know how to use vim): vim config/database.yml By default, this file will not exist because it is included in the .gitgignore . Therefore, you can take a template and add the following sections or add the whole document as discussed below: - In the development section, add the PostgreSQL configuration: development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 In the testing section, add the PostgreSQL configuration: test: <<: *default database: test_project_test host: localhost port: 5432 username: hb_dev password: aq1234567890 An example of the final config/database.yml file will look like this: default: &default adapter: postgresql encoding: unicode pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %> development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 test: <<: *default database: test_project_test username: hb_dev password: aq1234567890 host: localhost port: 5432 production: <<: *default database: test_project_production username: test_project password: <%= ENV['TEST_PROJECT_DATABASE_PASSWORD'] %> Save the changes and exit the editor. Next you will generate the PostgreSQL database schema by running: rake db:setup Or alternatively: rails db:setup rails db:migrate Lastly, bring up the server locally and access the address http://localhost:3000/ . rails s Hb-frontend # We install ember glabaly: npm install -g ember-cli In case we get an error related to access permissions `npm ERR! Error: EACCES, , change the owner of the node_modules folder from root to the current user to be able to access the directory: sudo chown -R $USER /usr/lib/node_modules We install the front-end dependencies: npm install The frontend is served and accessed from the browser at the url http://localhost:4200/ : ember s Possible errors during installation # Command not found # Bundle**: If running `bundle install returns the error bash: bundle: command not found it will be necessary to run it again: source /home/$USER/.rvm/scripts/rvm Rails**: If running rails db:setup returns the error bash: rails: command not found , it will be necessary to run again: source /home/$USER/.rvm/scripts/rvm ember : If running ember -v returns the error bash: ember: command not found , it will be necessary to run again: export PATH=node_modules/.bin:$PATH Add it to the PATH to have a permanent solution. For example, if you are using bash as a console, you can include the commands as last lines in the .bashrc file and then apply the changes with source .bashrc . Ruby version # When trying to install the bundle with the command below, you will probably encounter an error Your Ruby version is Y.Y.Y.Y, but your Gemfile specified X.X.X.X . bundle install To resolve this, you need to install and use the appropriate X.X.X. version. rvm install X.X.X rvm use X.X.X","title":"Help Buttons installations"},{"location":"English/installation/#help-buttons-installations","text":"","title":"Help Buttons installations"},{"location":"English/installation/#on-gnulinux","text":"References followed: Official Ruby on Rails installation documentation in English Official RVM documentation To install Ruby on Rails (RoR) on Debian or derivatives (Ubuntu) there are the following requirements: RVM PostgreSQL Nodejs Yarn","title":"On GNU/Linux"},{"location":"English/installation/#rvm-ruby-version-manager-installation","text":"We install the operating system packages required by RVM: sudo apt install -y git-core subversion gnupg2 curl Add the signature of the RVM repository that can be found on its official website : gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB We install the stable version of RVM: curl -sSL https://get.rvm.io | bash -s stable --ruby This command installs the latest stable versions of rvm, ruby and rails . When executed, it returns many messages on the screen. Once this process is finished, RVM tells us to run the next command or to restart the open shells. We will also run this command in case we get an error saying that the bundle command has not been found bash: bundle: command not found source /home/$USER/.rvm/scripts/rvm The rvm configuration is checked using the following command: type rvm | head -n 1 Which will return that rvm is a function . If this is not the case, rvm is not properly configured. In such a case you should consult the documentation at https://rvm.io/rvm/install and ask for help. Next, we check the commands: rvm, ruby, irb, gem. rvm list ruby -v irb -v gem -v","title":"RVM (Ruby Version Manager) Installation"},{"location":"English/installation/#installing-the-ruby-version-of-the-project","text":"Bundle is a ruby gem that keeps track and installs the different versions of the gems we need. We now have the environment installed and available to work with. When we try to install the bundle with the command below, we will probably encounter an error Your Ruby version is Y.Y.Y.Y, but your Gemfile specified X.X.X.X . bundle install To resolve this, you need to install and use the appropriate X.X.X. version. rvm install X.X.X rvm use X.X.X If we run the bundle install command again we will get another error indicating that the PostgreSQL database is missing.","title":"Installing the ruby version of the project"},{"location":"English/installation/#installation-and-configuration-of-postgresql","text":"The packages required for PostgreSQL installation are installed: sudo apt install postgresql postgresql-contrib libpq-dev -y The service is lifted with: systemctl start postgresql systemctl enable postgresql Open a PostgreSQL console to modify the password of the user postgres : sudo -i -u postgres psql The following command is entered to change the password: \\password postgres Next, a new PostgreSQL user named `rails_dev is created with privileges to create a database with createdb and a password aq1234567890 (it is recommended to change it to a stronger one, ideally generated with KeePassXC or BitWarden) create role hb_dev with createdb login password `aq1234567890`; PostgreSQL users are shown with: \\\u00fe Type exit to exit the PostgreSQL console. Run `bundle install again to continue with the installation. bundle install It finishes the execution without errors. The next step is to install Nodejs and Yarn.","title":"Installation and Configuration of PostgreSQL"},{"location":"English/installation/#installation-of-nodejs-and-yarn","text":"First we install the development tools for compiling C. sudo apt install gcc g++ make The Nodejs 14 repositories are installed via the following command: curl -sL https://deb.nodesource.com/setup_14.x | sudo bash - Nodejs is installed via the following command: sudo apt-get install -y nodejs Check nodejs and npm installation with: node -v npm -v The signature and yarn repositories are added using: curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Install yarn: sudo apt update && sudo apt install yarn","title":"Installation of Nodejs and Yarn"},{"location":"English/installation/#running-the-project","text":"","title":"Running the project"},{"location":"English/installation/#hb-backend","text":"We create the database configuration file config/database.yml with vim or nano (nano is recommended in case you don't know how to use vim): vim config/database.yml By default, this file will not exist because it is included in the .gitgignore . Therefore, you can take a template and add the following sections or add the whole document as discussed below: - In the development section, add the PostgreSQL configuration: development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 In the testing section, add the PostgreSQL configuration: test: <<: *default database: test_project_test host: localhost port: 5432 username: hb_dev password: aq1234567890 An example of the final config/database.yml file will look like this: default: &default adapter: postgresql encoding: unicode pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %> development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 test: <<: *default database: test_project_test username: hb_dev password: aq1234567890 host: localhost port: 5432 production: <<: *default database: test_project_production username: test_project password: <%= ENV['TEST_PROJECT_DATABASE_PASSWORD'] %> Save the changes and exit the editor. Next you will generate the PostgreSQL database schema by running: rake db:setup Or alternatively: rails db:setup rails db:migrate Lastly, bring up the server locally and access the address http://localhost:3000/ . rails s","title":"Hb-backend"},{"location":"English/installation/#hb-frontend","text":"We install ember glabaly: npm install -g ember-cli In case we get an error related to access permissions `npm ERR! Error: EACCES, , change the owner of the node_modules folder from root to the current user to be able to access the directory: sudo chown -R $USER /usr/lib/node_modules We install the front-end dependencies: npm install The frontend is served and accessed from the browser at the url http://localhost:4200/ : ember s","title":"Hb-frontend"},{"location":"English/installation/#possible-errors-during-installation","text":"","title":"Possible errors during installation"},{"location":"English/installation/#command-not-found","text":"Bundle**: If running `bundle install returns the error bash: bundle: command not found it will be necessary to run it again: source /home/$USER/.rvm/scripts/rvm Rails**: If running rails db:setup returns the error bash: rails: command not found , it will be necessary to run again: source /home/$USER/.rvm/scripts/rvm ember : If running ember -v returns the error bash: ember: command not found , it will be necessary to run again: export PATH=node_modules/.bin:$PATH Add it to the PATH to have a permanent solution. For example, if you are using bash as a console, you can include the commands as last lines in the .bashrc file and then apply the changes with source .bashrc .","title":"Command not found"},{"location":"English/installation/#ruby-version","text":"When trying to install the bundle with the command below, you will probably encounter an error Your Ruby version is Y.Y.Y.Y, but your Gemfile specified X.X.X.X . bundle install To resolve this, you need to install and use the appropriate X.X.X. version. rvm install X.X.X rvm use X.X.X","title":"Ruby version"}]}