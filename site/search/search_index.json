{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation # Run Documentation in local # Checkout the latest docs generated: https://helpbuttons.github.io/hb_docs First remember to install and execute docker. serve documentation # $ docker-compose up serve build documentation # $ docker-compose up build $ mkdir local $ cp swagger.yaml local/ $ docker run --rm -v \"${PWD}/local:/local\" openapitools/openapi-generator-cli generate -i /local/swagger.yaml -g typescript-node -o /local/backend $ cp -r local/backend/* ../hb-back/","title":"Documentation"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#run-documentation-in-local","text":"Checkout the latest docs generated: https://helpbuttons.github.io/hb_docs First remember to install and execute docker.","title":"Run Documentation in local"},{"location":"#serve-documentation","text":"$ docker-compose up serve","title":"serve documentation"},{"location":"#build-documentation","text":"$ docker-compose up build $ mkdir local $ cp swagger.yaml local/ $ docker run --rm -v \"${PWD}/local:/local\" openapitools/openapi-generator-cli generate -i /local/swagger.yaml -g typescript-node -o /local/backend $ cp -r local/backend/* ../hb-back/","title":"build documentation"},{"location":"api/","text":"Api documentation # const ui = SwaggerUIBundle({ url: 'swagger.yaml', dom_id: '#swagger-ui', })","title":"Api documentation"},{"location":"api/#api-documentation","text":"const ui = SwaggerUIBundle({ url: 'swagger.yaml', dom_id: '#swagger-ui', })","title":"Api documentation"},{"location":"Castellano/legacy/installation/","text":"Instalaciones de Help Buttons # En GNU/Linux # Referencias seguidas: Documentaci\u00f3n oficial de la instalaci\u00f3n de Ruby on Rails en castellano Documentaci\u00f3n oficial de RVM Para realizar la instalaci\u00f3n de Ruby on Rails (RoR) en Debian o derivados (Ubuntu) existen los siguientes requisitos: RVM PostgreSQL Nodejs Yarn Instalaci\u00f3n de RVM (Ruby Version Manager) # Instalamos los paquetes del sistema operativo requeritos por RVM: sudo apt install -y git-core subversion gnupg2 curl A\u00f1adimos la firma del repositorio de RVM que se puede encontrar en su p\u00e1gina oficial : gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB Instalamos la versi\u00f3n estable de RVM: curl -sSL https://get.rvm.io | bash -s stable --ruby Este comando instala las \u00faltimas versiones estables de rvm, ruby y rails . Al ejecutarlo se devuelve muchos mensajes por pantalla. Una vez finalizado este proceso, RVM nos dice que ejecutemos el siguiente comando o que reiniciemos las shells abiertas. Tambi\u00e9n ejecutaremos este comando en caso de obtener un error diciendo que no se ha encontrado el comando bundle bash: bundle: command not found source /home/$USER/.rvm/scripts/rvm Se comprueba la configuraci\u00f3n de rvm mediante la siguiente orden: type rvm | head -n 1 La cual nos devolver\u00e1 que rvm is a function . En caso de no ser as\u00ed, rvm no est\u00e1 configurado adecuadamente. En tal caso habr\u00e1 que consultar la documentaci\u00f3n en https://rvm.io/rvm/install y solicitar ayuda. A continuaci\u00f3n, comprobamos los comandos: rvm, ruby, irb, gem. rvm list ruby -v irb -v gem -v Instalaci\u00f3n de la versi\u00f3n de ruby del proyecto # Bundle es una gema de ruby que lleva la cuenta e instala las diferentes versiones de las gemas que necesitamos. Ya tenemos el entorno instalado y disponible para trabajar con \u00e9l. Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X Si volvemos a ejecutar el comando bundle install nos aparecer\u00e1 otro error indicando que falta instalar la base de datos PostgreSQL. Instalaci\u00f3n y configuraci\u00f3n de PostgreSQL # Se instalan los paquetes necesarios para la instalaci\u00f3n de PostgreSQL: sudo apt install postgresql postgresql-contrib libpq-dev -y Se levantan el servicio con: systemctl start postgresql systemctl enable postgresql Se abre una consola en PostgreSQL para modificar la contrase\u00f1a del usuario postgres : sudo -i -u postgres psql Se introduce el siguiente mandato para cambiar la contrase\u00f1a: \\password postgres A continuaci\u00f3n, se crea un nuevo usuario de PostgreSQL llamado rails_dev con privilegios para crear una base de datos with createdb y una contrase\u00f1a aq1234567890 (se recomienda cambiarla por otra m\u00e1s robusta, a poder ser generada con KeePassXC o BitWarden) create role hb_dev with createdb login password 'aq1234567890'; Se muestran los usuarios de PostgreSQL con: \\du Escribe exit para salir de la consola de PostgreSQL. Volvemos a ejecutar bundle install para continuar con la instalaci\u00f3n. bundle install Termina la ejecuci\u00f3n sin errores. El siguiente paso ser\u00e1 instalar Nodejs y Yarn. Instalaci\u00f3n de Nodejs y Yarn # Primero instalamos las herramientas de desarrollo para compilar C. sudo apt install gcc g++ make Se instalan los repositorios de Nodejs 14 a trav\u00e9s del siguiente comando: curl -sL https://deb.nodesource.com/setup_14.x | sudo bash - Se instala nodejs mediante la siguiente orden: sudo apt-get install -y nodejs Se comprueba la instalaci\u00f3n de nodejs y npm con: node -v npm -v Se a\u00f1ade la firma y los repositorios de yarn mediante: curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Instalamos yarn: sudo apt update && sudo apt install yarn Ejecuci\u00f3n del proyecto # Hb-backend # Creamos el archivo de configuraci\u00f3n de la base de datos config/database.yml con vim o nano (se recomienda nano en caso de no saber utilizar vim): vim config/database.yml Por defecto, no existir\u00e1 este fichero porque se incluye en el .gitgignore . Por lo tanto, se puede coger una plantilla y a\u00f1adir las siguientes secciones o a\u00f1adir el documento entero como se expone un poco m\u00e1s abajo: - En la secci\u00f3n development , a\u00f1ade la configuraci\u00f3n de PostgreSQL: development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 En la secci\u00f3n testing , a\u00f1ade la configuraci\u00f3n de PostgreSQL: test: <<: *default database: test_project_test host: localhost port: 5432 username: hb_dev password: aq1234567890 Un ejemplo del archivo final de config/database.yml ser\u00e1 el siguiente: default: &default adapter: postgresql encoding: unicode pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %> development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 test: <<: *default database: test_project_test username: hb_dev password: aq1234567890 host: localhost port: 5432 production: <<: *default database: test_project_production username: test_project password: <%= ENV['TEST_PROJECT_DATABASE_PASSWORD'] %> Guarda los cambios y sal del editor. Lo siguiente ser\u00e1 generar el esquema de la base de datos PostgreSQL ejecutando: rake db:setup O alternativamente: rails db:setup rails db:migrate Por \u00faltimo, levanta el servidor en local y accede a la direcci\u00f3n http://localhost:3000/ . rails s Hb-frontend # Instalamos ember glabalmente: npm install -g ember-cli En caso de obtener un error relaciondo con permisos de acceso npm ERR! Error: EACCES, , cambiamos el propietario de la carpeta node_modules de root al usuario actual para poder acceder al directorio: sudo chown -R $USER /usr/lib/node_modules Instalamos las depencias del front: npm install Se sirve el frontend y se accede desde el navegador a la url http://localhost:4200/ : ember s Posibles errores durante la instalaci\u00f3n # Command not found # Bundle : Si al ejecutar bundle install nos devuelve el error bash: bundle: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm Rails : Si al ejecutar rails db:setup nos devuelve el error bash: rails: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm ember : Si al ejecutar ember -v nos devuelve el error bash: ember: command not found ser\u00e1 necesario volver a ejecutar: export PATH=node_modules/.bin:$PATH A\u00f1adirlo al PATH para tener una soluci\u00f3n permanente. Por ejemplo, si se est\u00e1 utilizando bash como consola, se podr\u00e1 incluir los comandos como \u00faltimas l\u00edneas en el archivo .bashrc y posteriormente aplicar los cambios con source .bashrc . Ruby version # Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X","title":"Instalaciones de Help Buttons"},{"location":"Castellano/legacy/installation/#instalaciones-de-help-buttons","text":"","title":"Instalaciones de Help Buttons"},{"location":"Castellano/legacy/installation/#en-gnulinux","text":"Referencias seguidas: Documentaci\u00f3n oficial de la instalaci\u00f3n de Ruby on Rails en castellano Documentaci\u00f3n oficial de RVM Para realizar la instalaci\u00f3n de Ruby on Rails (RoR) en Debian o derivados (Ubuntu) existen los siguientes requisitos: RVM PostgreSQL Nodejs Yarn","title":"En GNU/Linux"},{"location":"Castellano/legacy/installation/#instalacion-de-rvm-ruby-version-manager","text":"Instalamos los paquetes del sistema operativo requeritos por RVM: sudo apt install -y git-core subversion gnupg2 curl A\u00f1adimos la firma del repositorio de RVM que se puede encontrar en su p\u00e1gina oficial : gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB Instalamos la versi\u00f3n estable de RVM: curl -sSL https://get.rvm.io | bash -s stable --ruby Este comando instala las \u00faltimas versiones estables de rvm, ruby y rails . Al ejecutarlo se devuelve muchos mensajes por pantalla. Una vez finalizado este proceso, RVM nos dice que ejecutemos el siguiente comando o que reiniciemos las shells abiertas. Tambi\u00e9n ejecutaremos este comando en caso de obtener un error diciendo que no se ha encontrado el comando bundle bash: bundle: command not found source /home/$USER/.rvm/scripts/rvm Se comprueba la configuraci\u00f3n de rvm mediante la siguiente orden: type rvm | head -n 1 La cual nos devolver\u00e1 que rvm is a function . En caso de no ser as\u00ed, rvm no est\u00e1 configurado adecuadamente. En tal caso habr\u00e1 que consultar la documentaci\u00f3n en https://rvm.io/rvm/install y solicitar ayuda. A continuaci\u00f3n, comprobamos los comandos: rvm, ruby, irb, gem. rvm list ruby -v irb -v gem -v","title":"Instalaci\u00f3n de RVM (Ruby Version Manager)"},{"location":"Castellano/legacy/installation/#instalacion-de-la-version-de-ruby-del-proyecto","text":"Bundle es una gema de ruby que lleva la cuenta e instala las diferentes versiones de las gemas que necesitamos. Ya tenemos el entorno instalado y disponible para trabajar con \u00e9l. Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X Si volvemos a ejecutar el comando bundle install nos aparecer\u00e1 otro error indicando que falta instalar la base de datos PostgreSQL.","title":"Instalaci\u00f3n de la versi\u00f3n de ruby del proyecto"},{"location":"Castellano/legacy/installation/#instalacion-y-configuracion-de-postgresql","text":"Se instalan los paquetes necesarios para la instalaci\u00f3n de PostgreSQL: sudo apt install postgresql postgresql-contrib libpq-dev -y Se levantan el servicio con: systemctl start postgresql systemctl enable postgresql Se abre una consola en PostgreSQL para modificar la contrase\u00f1a del usuario postgres : sudo -i -u postgres psql Se introduce el siguiente mandato para cambiar la contrase\u00f1a: \\password postgres A continuaci\u00f3n, se crea un nuevo usuario de PostgreSQL llamado rails_dev con privilegios para crear una base de datos with createdb y una contrase\u00f1a aq1234567890 (se recomienda cambiarla por otra m\u00e1s robusta, a poder ser generada con KeePassXC o BitWarden) create role hb_dev with createdb login password 'aq1234567890'; Se muestran los usuarios de PostgreSQL con: \\du Escribe exit para salir de la consola de PostgreSQL. Volvemos a ejecutar bundle install para continuar con la instalaci\u00f3n. bundle install Termina la ejecuci\u00f3n sin errores. El siguiente paso ser\u00e1 instalar Nodejs y Yarn.","title":"Instalaci\u00f3n y configuraci\u00f3n de PostgreSQL"},{"location":"Castellano/legacy/installation/#instalacion-de-nodejs-y-yarn","text":"Primero instalamos las herramientas de desarrollo para compilar C. sudo apt install gcc g++ make Se instalan los repositorios de Nodejs 14 a trav\u00e9s del siguiente comando: curl -sL https://deb.nodesource.com/setup_14.x | sudo bash - Se instala nodejs mediante la siguiente orden: sudo apt-get install -y nodejs Se comprueba la instalaci\u00f3n de nodejs y npm con: node -v npm -v Se a\u00f1ade la firma y los repositorios de yarn mediante: curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Instalamos yarn: sudo apt update && sudo apt install yarn","title":"Instalaci\u00f3n de Nodejs y Yarn"},{"location":"Castellano/legacy/installation/#ejecucion-del-proyecto","text":"","title":"Ejecuci\u00f3n del proyecto"},{"location":"Castellano/legacy/installation/#hb-backend","text":"Creamos el archivo de configuraci\u00f3n de la base de datos config/database.yml con vim o nano (se recomienda nano en caso de no saber utilizar vim): vim config/database.yml Por defecto, no existir\u00e1 este fichero porque se incluye en el .gitgignore . Por lo tanto, se puede coger una plantilla y a\u00f1adir las siguientes secciones o a\u00f1adir el documento entero como se expone un poco m\u00e1s abajo: - En la secci\u00f3n development , a\u00f1ade la configuraci\u00f3n de PostgreSQL: development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 En la secci\u00f3n testing , a\u00f1ade la configuraci\u00f3n de PostgreSQL: test: <<: *default database: test_project_test host: localhost port: 5432 username: hb_dev password: aq1234567890 Un ejemplo del archivo final de config/database.yml ser\u00e1 el siguiente: default: &default adapter: postgresql encoding: unicode pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %> development: <<: *default database: test_project_development username: hb_dev password: aq1234567890 host: localhost port: 5432 test: <<: *default database: test_project_test username: hb_dev password: aq1234567890 host: localhost port: 5432 production: <<: *default database: test_project_production username: test_project password: <%= ENV['TEST_PROJECT_DATABASE_PASSWORD'] %> Guarda los cambios y sal del editor. Lo siguiente ser\u00e1 generar el esquema de la base de datos PostgreSQL ejecutando: rake db:setup O alternativamente: rails db:setup rails db:migrate Por \u00faltimo, levanta el servidor en local y accede a la direcci\u00f3n http://localhost:3000/ . rails s","title":"Hb-backend"},{"location":"Castellano/legacy/installation/#hb-frontend","text":"Instalamos ember glabalmente: npm install -g ember-cli En caso de obtener un error relaciondo con permisos de acceso npm ERR! Error: EACCES, , cambiamos el propietario de la carpeta node_modules de root al usuario actual para poder acceder al directorio: sudo chown -R $USER /usr/lib/node_modules Instalamos las depencias del front: npm install Se sirve el frontend y se accede desde el navegador a la url http://localhost:4200/ : ember s","title":"Hb-frontend"},{"location":"Castellano/legacy/installation/#posibles-errores-durante-la-instalacion","text":"","title":"Posibles errores durante la instalaci\u00f3n"},{"location":"Castellano/legacy/installation/#command-not-found","text":"Bundle : Si al ejecutar bundle install nos devuelve el error bash: bundle: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm Rails : Si al ejecutar rails db:setup nos devuelve el error bash: rails: command not found ser\u00e1 necesario volver a ejecutar: source /home/$USER/.rvm/scripts/rvm ember : Si al ejecutar ember -v nos devuelve el error bash: ember: command not found ser\u00e1 necesario volver a ejecutar: export PATH=node_modules/.bin:$PATH A\u00f1adirlo al PATH para tener una soluci\u00f3n permanente. Por ejemplo, si se est\u00e1 utilizando bash como consola, se podr\u00e1 incluir los comandos como \u00faltimas l\u00edneas en el archivo .bashrc y posteriormente aplicar los cambios con source .bashrc .","title":"Command not found"},{"location":"Castellano/legacy/installation/#ruby-version","text":"Al intentar instalar el bundle con el comando a continuaci\u00f3n, seguramente nos encontremos con un error Your Ruby version is Y.Y.Y, but your Gemfile specified X.X.X . bundle install Para resolverlo, se necesita instalar y usar la versi\u00f3n X.X.X. adecuada. rvm install X.X.X rvm use X.X.X","title":"Ruby version"},{"location":"English/","text":"Welcome to Helpbuttons Documentation # This is a WIP area that can be updated while the project lives. Feel free to advice or propose any section that should be included. \u00bfWhat's HelpButtons? # Helpbuttons.org is an opensource platform for collaborative network making. It's a CMS for cooperative websites -like uber, glovo, blablacar and so many others- specialized in connecting unknown people by purposes in real life. Shortly, we want to democratize collaborative-apps-creation and we need a big community for this to be sustainable in time. \u00bfHow can HelpButtons exist? # We've been working on this concept since 2012 (yeah, WTF), testing and changing prototypes and teams, and now -after many tests, mock-ups and 2 beta versions- we have a better design and understanding of what Helpbuttons should be. Collaborative apps require a big amount of technical support and design that can't be afforded with just one in-app purpose. We see that lots of useful collaborative apps won't survive if they serve just one commitment, or just serve a small community, because the amount of work that needs to be done makes the project unsustainable. Making an app to help elders in your town can be an useful tool that, in many cases, won't get enough economical and proffesional support to live. That work is probably being done by so many others in other areas for so many small community purposes, like food sharing, transport sharing, house sharing and so may others. Why don't we unify the efforts? Is it possible? We think it's possible so we've been analyzing the main collaborative apps to see what they have in common. The design consist in a base squeleton with main fields that share all these apps and modules that can be designed, added andd removed to customize the app to your needs. We need people to help in refining these designs, sustain the community support and develop modules that addapt the base design to more purposes. \u00bfWhere do we want to go? #","title":"Welcome to Helpbuttons Documentation"},{"location":"English/#welcome-to-helpbuttons-documentation","text":"This is a WIP area that can be updated while the project lives. Feel free to advice or propose any section that should be included.","title":"Welcome to Helpbuttons Documentation"},{"location":"English/#whats-helpbuttons","text":"Helpbuttons.org is an opensource platform for collaborative network making. It's a CMS for cooperative websites -like uber, glovo, blablacar and so many others- specialized in connecting unknown people by purposes in real life. Shortly, we want to democratize collaborative-apps-creation and we need a big community for this to be sustainable in time.","title":"\u00bfWhat's HelpButtons?"},{"location":"English/#how-can-helpbuttons-exist","text":"We've been working on this concept since 2012 (yeah, WTF), testing and changing prototypes and teams, and now -after many tests, mock-ups and 2 beta versions- we have a better design and understanding of what Helpbuttons should be. Collaborative apps require a big amount of technical support and design that can't be afforded with just one in-app purpose. We see that lots of useful collaborative apps won't survive if they serve just one commitment, or just serve a small community, because the amount of work that needs to be done makes the project unsustainable. Making an app to help elders in your town can be an useful tool that, in many cases, won't get enough economical and proffesional support to live. That work is probably being done by so many others in other areas for so many small community purposes, like food sharing, transport sharing, house sharing and so may others. Why don't we unify the efforts? Is it possible? We think it's possible so we've been analyzing the main collaborative apps to see what they have in common. The design consist in a base squeleton with main fields that share all these apps and modules that can be designed, added andd removed to customize the app to your needs. We need people to help in refining these designs, sustain the community support and develop modules that addapt the base design to more purposes.","title":"\u00bfHow can HelpButtons exist?"},{"location":"English/#where-do-we-want-to-go","text":"","title":"\u00bfWhere do we want to go?"},{"location":"English/architecture/","text":"Architecture # Introduction # The project is divided in two repositories, front and back, that need to run at the same time. The doc repository, this one, can be edited here : Docs Repository Frontend Repository Backend Repository Technologies # We tried to choose technologies following three concepts: open software, mobile devices and GIS positioning. Trying to keep an eye on the popularity and documentation available for each one. HTML # LINK CSS # LINK Typescript # TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. TypeScript is designed for the development of large applications and transcompiles to JavaScript. Front: # Nextjs # LINK React # LINK RxJS # LINK RxJS is a library for reactive programming using Observables, to make it easier to compose asynchronous or callback-based code. This project is a rewrite of Reactive-Extensions/RxJS with better performance, better modularity, better debuggable call stacks, while staying mostly backwards compatible, with some breaking changes that reduce the API surface Backend : # Nodejs # LINK Nestjs # LINK NestJS is a framework for building efficient, scalable Node.js web applications. It uses modern JavaScript, is built with TypeScript and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming). PostgreSQL # LINK PostgreSQL, also known as Postgres, is a free and open-source relational database management system emphasizing extensibility and SQL compliance. It was originally named POSTGRES, referring to its origins as a successor to the Ingres database developed at the University of California, PostGIS # LINK PostGIS is a spatial database extender for PostgreSQL object-relational database. It adds support for geographic objects allowing location queries to be run in SQL. Basic concepts # In order to understand the project you need to know how three concepts interact: Buttons, Users and Networks. A network is an enviroment where the users can create buttons. Comparing with other collaborative apps: Airbnb would be a network, a house would be a button, and a landlord would be an user. One server could hold more than one network, and users could create buttons that could be published in several of those networks. So, the Button is the post, that can be posted in any enviroment (network) depending on the purpose and owned by an user. Conventions / Naming # Btn is traditional HTML button, Button is the actual post in the app HelpButtons. Css naming is lowercase, including file names. Folder and archive naming follows the logic ElementClass or ElementModel (i.e. CardNotification) except for main Classes/Models that start having many elements related to the same class (i.e ButtonNew, NetworkNew, ButtonCard, NetworkCard). As a general rule, we want elements to be grouped by type so it's easier to find all together (Cards, Forms, ...). Main Classes, on the contrary, have a lot of elements associated so it's better to have them together by naming the class first. For any question you can publish an issue in the repository follow the issue guide (link to issue guide ): Issue Guide MODELS # BUTTON # A Button is the app post. Basically when you create a button you make a publication that has some basic fields: A title, a type, a place, a date, a description, images and tags. On top of these records you have fields that change depending on the network type. Depending on those fields your app can be better for transport sharing (duration fields, destination list,...), food sharing (food types selectable, amounts fields,...) or any other purpose that your app can have. All these extra fields come specified in one JSON element that is dependant on a template called ButtonTemplate. Buttons can be activated and desactivated without the need of deleting them. And everybutton has an interactions record list called the Feed, where users and app changes related to the Button are displayed. All Buttons by default can be published at the same time in any Network that share the buttonTemplate. export interface IButton { id?: any | null, owner: any, name: string, templateButtonId: any | null, type: enum, tags: [Itag], description: string, //required data date: [], //GIS DATA geoPlace: [], // optional values networks: [], feedType: enum, //enum {single,group} feed structure templateExtraData: {}, //JSON template contains info about the image and the description (standard) and also about booleans, radius, checklist and every other field related to the network module } NETWORK # If the button is the post, the network is the group of posts. These posts share structure of ButtonTemplate defined in the network. One Network has a location, a radius,a description, an icon, a name and a list of options that change the visulization of the buttons (on map, on map by zones, on list only, on list + map) among others. The ButtonTemplate selected in the Network properties define the properties of the buttons and also the filters displayed in the Explore page and the fields in the creation menu of the Button New page. Networks can be also friends of other networks and show their data in common, so users couldd navigate in between them. All Buttons created in a network can be shared in another network too if they share the same ButtonTemplate. A network can be public (all can see what the Buttons inside) or private (you need to enter to see and interact with the Buttons). The creator of the network is the owner and moderator. This person can assign moderation roles to other users of the network. export interface INetwork { //required data id: string; name: string, url: string, avatar: string, privacy: string, //enum {publico, privado} default publico roles: string, //enum {admin, user, blocked} default admin, user //not required data tags: [], description: string, buttonsTemplate: {}, //array of objects, each type has an int, a name and a color associated. Default are offer (green), need (red). //data for GIS showButtons : string, //enum {area, point} show buttons by area not showing exact position on map place: string, geoPlace: {}, radius: string, friendNetworks: [], //only for admins: networkRoles: [], //array of roles specific for the net, default are net admins. Each of these net roles have their user list blockedUsers: [], //user ids, the blocked users cannot rejoin a network. only admin users // extra option friendNets:[12,234],} } USER # The users are the person profile that is over the networks. User can jump in and out of networks, and move their Buttons to other networks and to other Users. This way an user can keep their reputation and profile independent. User cannot be rated but their reputation is stablished by supports. Other users can support an user for increasing his reputation. Blocks and low support rates can be used to measure the negative impact of the actions of users that can be moderation objectives by the community. //User interface export interface IUser { username: string, email: string, realm: string, roles: [], token: string, } export interface ICurrentUser { token: string, } BUTTON TEMPLATE # ButtonTemplate is the model that adds the modularity. It's a mix of some boolean elements and a JSON objetc that can include custom information inside. It's used by the app to configure posts and forms and adapt them to the networks' purpose. i.e. A network for selling food would have a ButtonTemplate that includes references to prices, quantities, origins, etc. export interface ITemplateButton { //JSON template contains info about the image and the description (standard) and also about booleans, radius, checklist and every other field related to the network module id: any || null, name: string, type: enum, fields: {}, owner: int, } FEED # A Feed, as we introduced before, is a component that shows a list of interactions related to the component that is attached to. The Feed in the Button page shows all interactions (messages, updates, changes... ) related to that Button. The Feed in the Profile page shows all interactions related to the user (What we can call ). It has several filtered options. Filters change depending on the content but also depending on the user role. The owner of the Button can see different information in a Feed than other users, etc. TAG # Tags in buttons are used for search purposes but also to configure notifications. Users could select Tags in the Config page to receive notifications when a Button is creted with those tags, or with an specific button-type. { \"id\": \"string\", \"modelName\": \"string\", \"modelId\": \"string\", \"created\": \"2022-04-10T14:33:32.823Z\", \"modified\": \"2022-04-10T14:33:32.823Z\" } The ButtonTemplate Model # The ButtonTemplate is the model that defines the modular elements that will differenciate the Network. Fields is the JSON object that will enumerate the Button fileds and options for that Network. (Add examples) { \"id\": 0, \"name\": \"string\", \"type\": \"need\", \"fields\": {}, \"created\": \"2022-04-10T14:28:32.085Z\", \"modified\": \"2022-04-10T14:28:32.085Z\", \"owner\": \"string\" } Models # Folder architecture FRONT # The structure follows the typical arrangement of an React / Nextjs project. The naming follows the logic of FIRST FUNCTION - SECOND TYPE. i.e. BtnCirle (Btn is the function -button- and circle the type). Every directory has a .md file that explains the purpose of the folder. elements : Basic atoms repeated all over the app (Accordion, Avatar, Btn, BtnCircle, Checkbox, Dropdown, Form...) components : Group of elments that complete and develop a function (button, feed, map, popup, nav, network, picker, popup, search, user...) layouts : Group of components that are not enough to define a page. (May be erased?) pages : Urls of the application. In Nextjs the subfolders included in this foldder define the routes. (ButtonFile, ButtonNew, Explore, Faqs, Login, ...). You can check all of them in the Pages section: http://localhost:8000/English/pages/ modules : this a folder for complex functionalities that shoulddn't be separated by the general foler structure. i.e. You want to have the services and the reacts components together in a directory for authentication functionaliity. The folder has a fake example inside. services: Each model has a folder in this directory to communicate with the API (Buttons, ButtonTemplates, Feed, Networks, Tags, Users). Also basic API functionalities (Alerts, Errors, HttpUtils -localStorage- and Store) have a service in this folder. store : It's a custom script written by @hirunatan in Telegram. It's intended for storing temporal data in the session (without refreshing the page, after refresh data is lost) and avoid the need of using more complex store mngmnt software. http://localhost:8000/English/store/ It's an rxjs event stream service that you can subscribe to. If you're not familiar with observables follow the link to RxJS page. // === Hook para suscribirse al store === export function useRef(store: Store, selector: func) { const [value, setValue] = useState(null); useEffect(() => { store.state$.subscribe((state) => { const newValue = selector(state); if (newValue !== value) { setValue(selector(state)); } }); }); return value; } Folder architecture BACK #","title":"Architecture"},{"location":"English/architecture/#architecture","text":"","title":"Architecture"},{"location":"English/architecture/#introduction","text":"The project is divided in two repositories, front and back, that need to run at the same time. The doc repository, this one, can be edited here : Docs Repository Frontend Repository Backend Repository","title":"Introduction"},{"location":"English/architecture/#technologies","text":"We tried to choose technologies following three concepts: open software, mobile devices and GIS positioning. Trying to keep an eye on the popularity and documentation available for each one.","title":"Technologies"},{"location":"English/architecture/#front","text":"","title":"Front:"},{"location":"English/architecture/#backend","text":"","title":"Backend :"},{"location":"English/architecture/#basic-concepts","text":"In order to understand the project you need to know how three concepts interact: Buttons, Users and Networks. A network is an enviroment where the users can create buttons. Comparing with other collaborative apps: Airbnb would be a network, a house would be a button, and a landlord would be an user. One server could hold more than one network, and users could create buttons that could be published in several of those networks. So, the Button is the post, that can be posted in any enviroment (network) depending on the purpose and owned by an user.","title":"Basic concepts"},{"location":"English/architecture/#conventions-naming","text":"Btn is traditional HTML button, Button is the actual post in the app HelpButtons. Css naming is lowercase, including file names. Folder and archive naming follows the logic ElementClass or ElementModel (i.e. CardNotification) except for main Classes/Models that start having many elements related to the same class (i.e ButtonNew, NetworkNew, ButtonCard, NetworkCard). As a general rule, we want elements to be grouped by type so it's easier to find all together (Cards, Forms, ...). Main Classes, on the contrary, have a lot of elements associated so it's better to have them together by naming the class first. For any question you can publish an issue in the repository follow the issue guide (link to issue guide ): Issue Guide","title":"Conventions / Naming"},{"location":"English/architecture/#models","text":"","title":"MODELS"},{"location":"English/architecture/#button","text":"A Button is the app post. Basically when you create a button you make a publication that has some basic fields: A title, a type, a place, a date, a description, images and tags. On top of these records you have fields that change depending on the network type. Depending on those fields your app can be better for transport sharing (duration fields, destination list,...), food sharing (food types selectable, amounts fields,...) or any other purpose that your app can have. All these extra fields come specified in one JSON element that is dependant on a template called ButtonTemplate. Buttons can be activated and desactivated without the need of deleting them. And everybutton has an interactions record list called the Feed, where users and app changes related to the Button are displayed. All Buttons by default can be published at the same time in any Network that share the buttonTemplate. export interface IButton { id?: any | null, owner: any, name: string, templateButtonId: any | null, type: enum, tags: [Itag], description: string, //required data date: [], //GIS DATA geoPlace: [], // optional values networks: [], feedType: enum, //enum {single,group} feed structure templateExtraData: {}, //JSON template contains info about the image and the description (standard) and also about booleans, radius, checklist and every other field related to the network module }","title":"BUTTON"},{"location":"English/architecture/#network","text":"If the button is the post, the network is the group of posts. These posts share structure of ButtonTemplate defined in the network. One Network has a location, a radius,a description, an icon, a name and a list of options that change the visulization of the buttons (on map, on map by zones, on list only, on list + map) among others. The ButtonTemplate selected in the Network properties define the properties of the buttons and also the filters displayed in the Explore page and the fields in the creation menu of the Button New page. Networks can be also friends of other networks and show their data in common, so users couldd navigate in between them. All Buttons created in a network can be shared in another network too if they share the same ButtonTemplate. A network can be public (all can see what the Buttons inside) or private (you need to enter to see and interact with the Buttons). The creator of the network is the owner and moderator. This person can assign moderation roles to other users of the network. export interface INetwork { //required data id: string; name: string, url: string, avatar: string, privacy: string, //enum {publico, privado} default publico roles: string, //enum {admin, user, blocked} default admin, user //not required data tags: [], description: string, buttonsTemplate: {}, //array of objects, each type has an int, a name and a color associated. Default are offer (green), need (red). //data for GIS showButtons : string, //enum {area, point} show buttons by area not showing exact position on map place: string, geoPlace: {}, radius: string, friendNetworks: [], //only for admins: networkRoles: [], //array of roles specific for the net, default are net admins. Each of these net roles have their user list blockedUsers: [], //user ids, the blocked users cannot rejoin a network. only admin users // extra option friendNets:[12,234],} }","title":"NETWORK"},{"location":"English/architecture/#user","text":"The users are the person profile that is over the networks. User can jump in and out of networks, and move their Buttons to other networks and to other Users. This way an user can keep their reputation and profile independent. User cannot be rated but their reputation is stablished by supports. Other users can support an user for increasing his reputation. Blocks and low support rates can be used to measure the negative impact of the actions of users that can be moderation objectives by the community. //User interface export interface IUser { username: string, email: string, realm: string, roles: [], token: string, } export interface ICurrentUser { token: string, }","title":"USER"},{"location":"English/architecture/#button-template","text":"ButtonTemplate is the model that adds the modularity. It's a mix of some boolean elements and a JSON objetc that can include custom information inside. It's used by the app to configure posts and forms and adapt them to the networks' purpose. i.e. A network for selling food would have a ButtonTemplate that includes references to prices, quantities, origins, etc. export interface ITemplateButton { //JSON template contains info about the image and the description (standard) and also about booleans, radius, checklist and every other field related to the network module id: any || null, name: string, type: enum, fields: {}, owner: int, }","title":"BUTTON TEMPLATE"},{"location":"English/architecture/#feed","text":"A Feed, as we introduced before, is a component that shows a list of interactions related to the component that is attached to. The Feed in the Button page shows all interactions (messages, updates, changes... ) related to that Button. The Feed in the Profile page shows all interactions related to the user (What we can call ). It has several filtered options. Filters change depending on the content but also depending on the user role. The owner of the Button can see different information in a Feed than other users, etc.","title":"FEED"},{"location":"English/architecture/#tag","text":"Tags in buttons are used for search purposes but also to configure notifications. Users could select Tags in the Config page to receive notifications when a Button is creted with those tags, or with an specific button-type. { \"id\": \"string\", \"modelName\": \"string\", \"modelId\": \"string\", \"created\": \"2022-04-10T14:33:32.823Z\", \"modified\": \"2022-04-10T14:33:32.823Z\" }","title":"TAG"},{"location":"English/architecture/#the-buttontemplate-model","text":"The ButtonTemplate is the model that defines the modular elements that will differenciate the Network. Fields is the JSON object that will enumerate the Button fileds and options for that Network. (Add examples) { \"id\": 0, \"name\": \"string\", \"type\": \"need\", \"fields\": {}, \"created\": \"2022-04-10T14:28:32.085Z\", \"modified\": \"2022-04-10T14:28:32.085Z\", \"owner\": \"string\" }","title":"The ButtonTemplate Model"},{"location":"English/architecture/#models_1","text":"","title":"Models"},{"location":"English/architecture/#folder-architecture-front","text":"The structure follows the typical arrangement of an React / Nextjs project. The naming follows the logic of FIRST FUNCTION - SECOND TYPE. i.e. BtnCirle (Btn is the function -button- and circle the type). Every directory has a .md file that explains the purpose of the folder. elements : Basic atoms repeated all over the app (Accordion, Avatar, Btn, BtnCircle, Checkbox, Dropdown, Form...) components : Group of elments that complete and develop a function (button, feed, map, popup, nav, network, picker, popup, search, user...) layouts : Group of components that are not enough to define a page. (May be erased?) pages : Urls of the application. In Nextjs the subfolders included in this foldder define the routes. (ButtonFile, ButtonNew, Explore, Faqs, Login, ...). You can check all of them in the Pages section: http://localhost:8000/English/pages/ modules : this a folder for complex functionalities that shoulddn't be separated by the general foler structure. i.e. You want to have the services and the reacts components together in a directory for authentication functionaliity. The folder has a fake example inside. services: Each model has a folder in this directory to communicate with the API (Buttons, ButtonTemplates, Feed, Networks, Tags, Users). Also basic API functionalities (Alerts, Errors, HttpUtils -localStorage- and Store) have a service in this folder. store : It's a custom script written by @hirunatan in Telegram. It's intended for storing temporal data in the session (without refreshing the page, after refresh data is lost) and avoid the need of using more complex store mngmnt software. http://localhost:8000/English/store/ It's an rxjs event stream service that you can subscribe to. If you're not familiar with observables follow the link to RxJS page. // === Hook para suscribirse al store === export function useRef(store: Store, selector: func) { const [value, setValue] = useState(null); useEffect(() => { store.state$.subscribe((state) => { const newValue = selector(state); if (newValue !== value) { setValue(selector(state)); } }); }); return value; }","title":"Folder architecture FRONT"},{"location":"English/architecture/#folder-architecture-back","text":"","title":"Folder architecture BACK"},{"location":"English/commit/","text":"Commit Message Conventions # These rules are adopted from the AngularJS commit conventions . Goals Generating CHANGELOG.md Recognizing unimportant commits Provide more information when browsing the history Format of the commit message Subject line Allowed <type> Allowed <scope> <subject> text Message body Message footer Breaking changes Referencing issues Examples Goals # allow generating CHANGELOG.md by script allow ignoring commits by git bisect (not important commits like formatting) provide better information when browsing the history Generating CHANGELOG.md # We use these three sections in changelog: new features, bug fixes, breaking changes. This list could be generated by script when doing a release. Along with links to related commits. Of course you can edit this change log before actual release, but it could generate the skeleton. List of all subjects (first lines in commit message) since last release: git log <last tag> HEAD --pretty=format:%s New features in this release git log <last release> HEAD --grep feature Recognizing unimportant commits # These are formatting changes (adding/removing spaces/empty lines, indentation), missing semi colons, comments. So when you are looking for some change, you can ignore these commits - no logic change inside this commit. When bisecting, you can ignore these by: git bisect skip $(git rev-list --grep irrelevant <good place> HEAD) Provide more information when browsing the history # This would add kinda \u201ccontext\u201d information. Look at these messages (taken from last few angular\u2019s commits): * Fix small typo in docs widget (tutorial instructions) * Fix test for scenario.Application - should remove old iframe * docs - various doc fixes * docs - stripping extra new lines * Replaced double line break with single when text is fetched from Google * Added support for properties in documentation All of these messages try to specify where is the change. But they don\u2019t share any convention... Look at these messages: * fix comment stripping * fixing broken links * Bit of refactoring * Check whether links do exist and throw exception * Fix sitemap include (to work on case sensitive linux) Are you able to guess what\u2019s inside ? These messages miss place specification... So maybe something like parts of the code: docs, docs-parser, compiler, scenario-runner, \u2026 I know, you can find this information by checking which files had been changed, but that\u2019s slow. And when looking in git history I can see all of us tries to specify the place, only missing the convention. Format of the commit message # <type>(<scope>): <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Any line of the commit message cannot be longer 100 characters! This allows the message to be easier to read on github as well as in various git tools. Subject line # Subject line contains succinct description of the change. Allowed <type> # feat (feature) fix (bug fix) docs (documentation) style (formatting, missing semi colons, \u2026) refactor test (when adding missing tests) chore (maintain) Allowed <scope> # Scope could be anything specifying place of the commit change. For example $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView, etc... <subject> text # use imperative, present tense: \u201cchange\u201d not \u201cchanged\u201d nor \u201cchanges\u201d don't capitalize first letter no dot (.) at the end Message body # just as in use imperative, present tense: \u201cchange\u201d not \u201cchanged\u201d nor \u201cchanges\u201d includes motivation for the change and contrasts with previous behavior http://365git.tumblr.com/post/3308646748/writing-git-commit-messages http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html Message footer # Breaking changes # All breaking changes have to be mentioned in footer with the description of the change, justification and migration notes BREAKING CHANGE: isolate scope bindings definition has changed and the inject option for the directive controller injection was removed. To migrate the code follow the example below: Before: scope: { myAttr: 'attribute', myBind: 'bind', myExpression: 'expression', myEval: 'evaluate', myAccessor: 'accessor' } After: scope: { myAttr: '@', myBind: '@', myExpression: '&', // myEval - usually not useful, but in cases where the expression is assignable, you can use '=' myAccessor: '=' // in directive's template change myAccessor() to myAccessor } The removed `inject` wasn't generaly useful for directives so there should be no code using it. Referencing issues # Closed bugs should be listed on a separate line in the footer prefixed with \"Closes\" keyword like this: Closes #234 or in case of multiple issues: Closes #123, #245, #992 Examples # feat($browser): onUrlChange event (popstate/hashchange/polling) Added new event to $browser: - forward popstate event if available - forward hashchange event if popstate not available - do polling when neither popstate nor hashchange available Breaks $browser.onHashChange, which was removed (use onUrlChange instead) fix($compile): couple of unit tests for IE9 Older IEs serialize html uppercased, but IE9 does not... Would be better to expect case insensitive, unfortunately jasmine does not allow to user regexps for throw expectations. Closes #392 Breaks foo.bar api, foo.baz should be used instead feat(directive): ng:disabled, ng:checked, ng:multiple, ng:readonly, ng:selected New directives for proper binding these attributes in older browsers (IE). Added coresponding description, live examples and e2e tests. Closes #351 style($location): add couple of missing semi colons docs(guide): updated fixed docs from Google Docs Couple of typos fixed: - indentation - batchLogbatchLog -> batchLog - start periodic checking - missing brace feat($compile): simplify isolate scope bindings Changed the isolate scope binding options to: - @attr - attribute binding (including interpolation) - =model - by-directional model binding - &expr - expression execution binding This change simplifies the terminology as well as number of choices available to the developer. It also supports local name aliasing from the parent. BREAKING CHANGE: isolate scope bindings definition has changed and the inject option for the directive controller injection was removed. To migrate the code follow the example below: Before: scope: { myAttr: 'attribute', myBind: 'bind', myExpression: 'expression', myEval: 'evaluate', myAccessor: 'accessor' } After: scope: { myAttr: '@', myBind: '@', myExpression: '&', // myEval - usually not useful, but in cases where the expression is assignable, you can use '=' myAccessor: '=' // in directive's template change myAccessor() to myAccessor } The removed `inject` wasn't generaly useful for directives so there should be no code using it.","title":"Commit"},{"location":"English/commit/#commit-message-conventions","text":"These rules are adopted from the AngularJS commit conventions . Goals Generating CHANGELOG.md Recognizing unimportant commits Provide more information when browsing the history Format of the commit message Subject line Allowed <type> Allowed <scope> <subject> text Message body Message footer Breaking changes Referencing issues Examples","title":"Commit Message Conventions"},{"location":"English/commit/#goals","text":"allow generating CHANGELOG.md by script allow ignoring commits by git bisect (not important commits like formatting) provide better information when browsing the history","title":"Goals"},{"location":"English/commit/#generating-changelogmd","text":"We use these three sections in changelog: new features, bug fixes, breaking changes. This list could be generated by script when doing a release. Along with links to related commits. Of course you can edit this change log before actual release, but it could generate the skeleton. List of all subjects (first lines in commit message) since last release: git log <last tag> HEAD --pretty=format:%s New features in this release git log <last release> HEAD --grep feature","title":"Generating CHANGELOG.md"},{"location":"English/commit/#recognizing-unimportant-commits","text":"These are formatting changes (adding/removing spaces/empty lines, indentation), missing semi colons, comments. So when you are looking for some change, you can ignore these commits - no logic change inside this commit. When bisecting, you can ignore these by: git bisect skip $(git rev-list --grep irrelevant <good place> HEAD)","title":"Recognizing unimportant commits"},{"location":"English/commit/#provide-more-information-when-browsing-the-history","text":"This would add kinda \u201ccontext\u201d information. Look at these messages (taken from last few angular\u2019s commits): * Fix small typo in docs widget (tutorial instructions) * Fix test for scenario.Application - should remove old iframe * docs - various doc fixes * docs - stripping extra new lines * Replaced double line break with single when text is fetched from Google * Added support for properties in documentation All of these messages try to specify where is the change. But they don\u2019t share any convention... Look at these messages: * fix comment stripping * fixing broken links * Bit of refactoring * Check whether links do exist and throw exception * Fix sitemap include (to work on case sensitive linux) Are you able to guess what\u2019s inside ? These messages miss place specification... So maybe something like parts of the code: docs, docs-parser, compiler, scenario-runner, \u2026 I know, you can find this information by checking which files had been changed, but that\u2019s slow. And when looking in git history I can see all of us tries to specify the place, only missing the convention.","title":"Provide more information when browsing the history"},{"location":"English/commit/#format-of-the-commit-message","text":"<type>(<scope>): <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Any line of the commit message cannot be longer 100 characters! This allows the message to be easier to read on github as well as in various git tools.","title":"Format of the commit message"},{"location":"English/commit/#subject-line","text":"Subject line contains succinct description of the change.","title":"Subject line"},{"location":"English/commit/#message-body","text":"just as in use imperative, present tense: \u201cchange\u201d not \u201cchanged\u201d nor \u201cchanges\u201d includes motivation for the change and contrasts with previous behavior http://365git.tumblr.com/post/3308646748/writing-git-commit-messages http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html","title":"Message body"},{"location":"English/commit/#message-footer","text":"","title":"Message footer"},{"location":"English/commit/#examples","text":"feat($browser): onUrlChange event (popstate/hashchange/polling) Added new event to $browser: - forward popstate event if available - forward hashchange event if popstate not available - do polling when neither popstate nor hashchange available Breaks $browser.onHashChange, which was removed (use onUrlChange instead) fix($compile): couple of unit tests for IE9 Older IEs serialize html uppercased, but IE9 does not... Would be better to expect case insensitive, unfortunately jasmine does not allow to user regexps for throw expectations. Closes #392 Breaks foo.bar api, foo.baz should be used instead feat(directive): ng:disabled, ng:checked, ng:multiple, ng:readonly, ng:selected New directives for proper binding these attributes in older browsers (IE). Added coresponding description, live examples and e2e tests. Closes #351 style($location): add couple of missing semi colons docs(guide): updated fixed docs from Google Docs Couple of typos fixed: - indentation - batchLogbatchLog -> batchLog - start periodic checking - missing brace feat($compile): simplify isolate scope bindings Changed the isolate scope binding options to: - @attr - attribute binding (including interpolation) - =model - by-directional model binding - &expr - expression execution binding This change simplifies the terminology as well as number of choices available to the developer. It also supports local name aliasing from the parent. BREAKING CHANGE: isolate scope bindings definition has changed and the inject option for the directive controller injection was removed. To migrate the code follow the example below: Before: scope: { myAttr: 'attribute', myBind: 'bind', myExpression: 'expression', myEval: 'evaluate', myAccessor: 'accessor' } After: scope: { myAttr: '@', myBind: '@', myExpression: '&', // myEval - usually not useful, but in cases where the expression is assignable, you can use '=' myAccessor: '=' // in directive's template change myAccessor() to myAccessor } The removed `inject` wasn't generaly useful for directives so there should be no code using it.","title":"Examples"},{"location":"English/contact/","text":"Contact # The community debates in this Telegram channel, feel free to ask for joining: Telegram Also feel free to create issues in our github repositories : Github Helpbuttons Community email in help@helpbuttons.org","title":"Contact"},{"location":"English/contact/#contact","text":"The community debates in this Telegram channel, feel free to ask for joining: Telegram Also feel free to create issues in our github repositories : Github Helpbuttons Community email in help@helpbuttons.org","title":"Contact"},{"location":"English/functionality/","text":"Functionalities # Backend # Register Username Email / phone Password Confirmed email Login Username / phone Password Logout Password Recovery New Password Confirm new Password Tag creation Tag Name Tag search Name Button creation Net Type Tags Description Location Date Images Button destruction Button activation/deactivation Button edition Net Type Tags Description Location Date Images Block Button Share Button Net Creator User Name Type Tags Description Location Date Images Button transfer Username / email Start Chat Send Message Send file Erase Chat Interest Tag Creation Tag Name Tag search Name Nets Button Type User edition Name Username Password Language tags Blocked Users Supported Users Interests tags User position tracking User destruction Block User general Username Block User in Net Username Net Notify interests User Id UserName Interest Id Button type Max Distance of Button to User position Notify message UserName Interest Id Button type Share Button UserName Interest Id Button type Button search By tag Tagname By Location Location Name Lat Lng By Date Button Date Button filter By type ... Any filter depending on Net Type (Modules) Tag Search Tag seach Name Tag Id Set Net Admins Set Net Admin User Support User Net creation Net edition Net destruction Send email notifications Interest button created Cancel email notifications Send push notifications Cancel push notifications Frontend # Register Login Logout Password Recovery Button creation Button destruction Button activation/deactivation Button edition User edition User position tracking User destruction Net creation Net edition Net destruction Send email notifications Send push notifications","title":"Functionality"},{"location":"English/functionality/#functionalities","text":"","title":"Functionalities"},{"location":"English/functionality/#backend","text":"Register Username Email / phone Password Confirmed email Login Username / phone Password Logout Password Recovery New Password Confirm new Password Tag creation Tag Name Tag search Name Button creation Net Type Tags Description Location Date Images Button destruction Button activation/deactivation Button edition Net Type Tags Description Location Date Images Block Button Share Button Net Creator User Name Type Tags Description Location Date Images Button transfer Username / email Start Chat Send Message Send file Erase Chat Interest Tag Creation Tag Name Tag search Name Nets Button Type User edition Name Username Password Language tags Blocked Users Supported Users Interests tags User position tracking User destruction Block User general Username Block User in Net Username Net Notify interests User Id UserName Interest Id Button type Max Distance of Button to User position Notify message UserName Interest Id Button type Share Button UserName Interest Id Button type Button search By tag Tagname By Location Location Name Lat Lng By Date Button Date Button filter By type ... Any filter depending on Net Type (Modules) Tag Search Tag seach Name Tag Id Set Net Admins Set Net Admin User Support User Net creation Net edition Net destruction Send email notifications Interest button created Cancel email notifications Send push notifications Cancel push notifications","title":"Backend"},{"location":"English/functionality/#frontend","text":"Register Login Logout Password Recovery Button creation Button destruction Button activation/deactivation Button edition User edition User position tracking User destruction Net creation Net edition Net destruction Send email notifications Send push notifications","title":"Frontend"},{"location":"English/installation/","text":"Installation Guide # The project is divided in two repositories, hb-front and hb-back, that need to run at the same time. The docs repository, this one, can be edited here : https://github.com/helpbuttons/hb_docs Requisites # Install all this to start: PostgreSQL para PostGIS https://www.postgresql.org/ Docker https://www.docker.com/ Nodejs https://nodejs.org/en/ Yarn o NPM https://yarnpkg.com/ https://www.npmjs.com/ running the frontend # https://github.com/helpbuttons/hb-front Open console / terminal: npm install npm run dev You can see the running app here: http://localhost:3000/ running the backend # https://github.com/helpbuttons/hb-back We need to run an instance of postgis.. we recomend to use docker # Open console / terminal: To start postgis: $ cp env.docker .env $ docker-compose up db -d install dependencies # yarn Run the application # $ yarn start Open http://127.0.0.1:3001 in your browser. run the application in watchmode # $ yarn start:watch developers hints: # Cheatsheet on chai and mochajs https://devhints.io/chai.html docker compose up http://localhost:3001/ Instalaci\u00f3n de la versi\u00f3n de Node del proyecto. Problemas comunes. #","title":"Installation"},{"location":"English/installation/#installation-guide","text":"The project is divided in two repositories, hb-front and hb-back, that need to run at the same time. The docs repository, this one, can be edited here : https://github.com/helpbuttons/hb_docs","title":"Installation Guide"},{"location":"English/installation/#requisites","text":"Install all this to start: PostgreSQL para PostGIS https://www.postgresql.org/ Docker https://www.docker.com/ Nodejs https://nodejs.org/en/ Yarn o NPM https://yarnpkg.com/ https://www.npmjs.com/","title":"Requisites"},{"location":"English/installation/#running-the-frontend","text":"https://github.com/helpbuttons/hb-front Open console / terminal: npm install npm run dev You can see the running app here: http://localhost:3000/","title":"running the frontend"},{"location":"English/installation/#running-the-backend","text":"https://github.com/helpbuttons/hb-back","title":"running the backend"},{"location":"English/installation/#install-dependencies","text":"yarn","title":"install dependencies"},{"location":"English/installation/#developers-hints","text":"Cheatsheet on chai and mochajs https://devhints.io/chai.html docker compose up http://localhost:3001/","title":"developers hints:"},{"location":"English/installation/#instalacion-de-la-version-de-node-del-proyecto-problemas-comunes","text":"","title":"Instalaci\u00f3n de la versi\u00f3n de Node del proyecto. Problemas comunes."},{"location":"English/issues%26PR/","text":"Issue tracker is ONLY used for reporting bugs. New features should be discussed on our Telegram channel. Please use Github for supporting issues. Copy any of this to start an issue in Github: Bug Issue Template # ## Expected Behavior <!--- Tell us what should happen --> ## Current Behavior <!--- Tell us what happens instead of the expected behavior --> ## Possible Solution <!--- Not obligatory, but suggest a fix/reason for the bug, --> ## Steps to Reproduce <!--- Provide a link to a live example, or an unambiguous set of steps to --> <!--- reproduce this bug. Include code to reproduce, if relevant --> 1. 2. 3. 4. ## Context (Environment) <!--- How has this issue affected you? What are you trying to accomplish? --> <!--- Providing context helps us come up with a solution that is most useful in the real world --> <!--- Provide a general summary of the issue in the Title above --> ## Detailed Description <!--- Provide a detailed description of the change or addition you are proposing --> ## Possible Implementation <!--- Not obligatory, but suggest an idea for implementing addition or change --> Pull Request Template # <!--- Provide a general summary of your changes in the Title above --> ## Description <!--- Describe your changes in detail --> ## Related Issue <!--- This project only accepts pull requests related to open issues --> <!--- If suggesting a new feature or change, please discuss it in an issue first --> <!--- If fixing a bug, there should be an issue describing it with steps to reproduce --> <!--- Please link to the issue here: --> ## Motivation and Context <!--- Why is this change required? What problem does it solve? --> <!--- If it fixes an open issue, please link to the issue here. --> ## How Has This Been Tested? <!--- Please describe in detail how you tested your changes. --> <!--- Include details of your testing environment, and the tests you ran to --> <!--- see how your change affects other areas of the code, etc. --> ## Screenshots (if appropriate):","title":"issues&PR"},{"location":"English/issues%26PR/#bug-issue-template","text":"## Expected Behavior <!--- Tell us what should happen --> ## Current Behavior <!--- Tell us what happens instead of the expected behavior --> ## Possible Solution <!--- Not obligatory, but suggest a fix/reason for the bug, --> ## Steps to Reproduce <!--- Provide a link to a live example, or an unambiguous set of steps to --> <!--- reproduce this bug. Include code to reproduce, if relevant --> 1. 2. 3. 4. ## Context (Environment) <!--- How has this issue affected you? What are you trying to accomplish? --> <!--- Providing context helps us come up with a solution that is most useful in the real world --> <!--- Provide a general summary of the issue in the Title above --> ## Detailed Description <!--- Provide a detailed description of the change or addition you are proposing --> ## Possible Implementation <!--- Not obligatory, but suggest an idea for implementing addition or change -->","title":"Bug Issue Template"},{"location":"English/issues%26PR/#pull-request-template","text":"<!--- Provide a general summary of your changes in the Title above --> ## Description <!--- Describe your changes in detail --> ## Related Issue <!--- This project only accepts pull requests related to open issues --> <!--- If suggesting a new feature or change, please discuss it in an issue first --> <!--- If fixing a bug, there should be an issue describing it with steps to reproduce --> <!--- Please link to the issue here: --> ## Motivation and Context <!--- Why is this change required? What problem does it solve? --> <!--- If it fixes an open issue, please link to the issue here. --> ## How Has This Been Tested? <!--- Please describe in detail how you tested your changes. --> <!--- Include details of your testing environment, and the tests you ran to --> <!--- see how your change affects other areas of the code, etc. --> ## Screenshots (if appropriate):","title":"Pull Request Template"},{"location":"English/pages/","text":"Pages # Pages of the app, with a brief ddescription, are attached above. ButtonFile # It's the Button post page. Here you can see complete Button's data, Network's ButtonTemplate specific fields included. Also you can find the Button's Feed, with all the conversation and activity related to the Button. You can access this page from any shared link to the button or through the Explore page. ButtonNew # Button creation form. Fields inside change depending on the ButtonTemplate associated with the Network. Config # Page for customizing user account. Administrate profile options, security, notifications, user's Networks, etc. Explore # Explore is the main view. It's the page where you can see the Buttons -the posts- in different views and with different filters. The different views and filters are configurable in the Network's options section in creator user's Config view. These types of view are: Types of views in Explore page: # Only Map # Shows Buttons only on map, selectable by pins placed on specific coordinates. Map with list by zones # Shows Buttons on map and on a list displayed on top of the map. User can click on polygonal zones drawn over the map to display in the list Buttons included in that area. Map with list by pins # Shows Buttons on map view and a list component displaying a summary of the Buttons on top. Buttons are selectable by pins displayed over the map and on the list, summaries. Only list # Buttons are shown on a list filtered by place, type, tags or any other filter depending on the Network's ButtonTemplate. Faqs # All questions and info useful for the user can be foundd and placed here. HomeInfo # Welcome page with access to Button's search by place and Netowrk's selection and creation menu. For first time-new Helpbuttons installation, the user would be asked to create a Network in this view. Login # Already registered user access. NetworkAccess # Welcome screen for new private Network's users. User sees a question about acceptting entering the app or not. NetworkNew # Create new network. The registered user becomes the creator and administrator. The user choose basic info just to create a Network that can be later modified in the User's Config page. Notifiications # Displays a feed of all user's activity. Included all Buttons' interactions and user changes to the account. Profile # User's account related info. it's a card with all the custom User's info and photos. Access to Config page. Recovery # Password recovery page accessible only from the recovery email. Inset new password twiice. RepositoryPage # Ddisplays a list of all the elements andd components of the app. Used for ddesign purposes only. Signup # User's registration page.","title":"Pages"},{"location":"English/pages/#pages","text":"Pages of the app, with a brief ddescription, are attached above.","title":"Pages"},{"location":"English/pages/#buttonfile","text":"It's the Button post page. Here you can see complete Button's data, Network's ButtonTemplate specific fields included. Also you can find the Button's Feed, with all the conversation and activity related to the Button. You can access this page from any shared link to the button or through the Explore page.","title":"ButtonFile"},{"location":"English/pages/#buttonnew","text":"Button creation form. Fields inside change depending on the ButtonTemplate associated with the Network.","title":"ButtonNew"},{"location":"English/pages/#config","text":"Page for customizing user account. Administrate profile options, security, notifications, user's Networks, etc.","title":"Config"},{"location":"English/pages/#explore","text":"Explore is the main view. It's the page where you can see the Buttons -the posts- in different views and with different filters. The different views and filters are configurable in the Network's options section in creator user's Config view. These types of view are:","title":"Explore"},{"location":"English/pages/#faqs","text":"All questions and info useful for the user can be foundd and placed here.","title":"Faqs"},{"location":"English/pages/#homeinfo","text":"Welcome page with access to Button's search by place and Netowrk's selection and creation menu. For first time-new Helpbuttons installation, the user would be asked to create a Network in this view.","title":"HomeInfo"},{"location":"English/pages/#login","text":"Already registered user access.","title":"Login"},{"location":"English/pages/#networkaccess","text":"Welcome screen for new private Network's users. User sees a question about acceptting entering the app or not.","title":"NetworkAccess"},{"location":"English/pages/#networknew","text":"Create new network. The registered user becomes the creator and administrator. The user choose basic info just to create a Network that can be later modified in the User's Config page.","title":"NetworkNew"},{"location":"English/pages/#notifiications","text":"Displays a feed of all user's activity. Included all Buttons' interactions and user changes to the account.","title":"Notifiications"},{"location":"English/pages/#profile","text":"User's account related info. it's a card with all the custom User's info and photos. Access to Config page.","title":"Profile"},{"location":"English/pages/#recovery","text":"Password recovery page accessible only from the recovery email. Inset new password twiice.","title":"Recovery"},{"location":"English/pages/#repositorypage","text":"Ddisplays a list of all the elements andd components of the app. Used for ddesign purposes only.","title":"RepositoryPage"},{"location":"English/pages/#signup","text":"User's registration page.","title":"Signup"},{"location":"English/store/","text":"Store # A typical problem in web applications is how to share data between unrelated web components in one page. When a component is a child of another one, the parent may pass info with the properties. But if components that want to share data are scattered around the page, the question is more difficult. In addition, when the interacions become more complex, a change of one piece of data, often triggers further changes elsewhere. Without care, this may lead to infinite loops or race conditions. There are a number of solutions for these problems. Here we use the Store module, inspired in Redux but much simpler to use, although quite powerful. It's based in two main contents: The Store holds a global state of the application. A tree of objects that may be changed by any component, and subscribed by any one to be notified of the changes. The Event stream. When any component wants to modify the state, it does not directly write to the Store. Instead, emits an Event , that is queued and executed only when all other processes are finished. The event is an object with a function that receives the global state, and returns a new state with the desired changes. This way, loops and race conditions are avoided, the state being stable while any javascript event or component redraw is being executed. Declaring the global state # Define an interface with all the variables you need inside the global state. Then, declare ain instance of Store , generated from the given interface and with the initial data, and exported to be accessible from anywhere in the app: // index.tsx import { Store } from \"store/Store\"; export interface GlobalState { loading: boolean, currentUser?: { username: string, name: string; email: string; } } export const store = new Store<GlobalState>({ loading: false, currentUser: null, }); Using immer to efficiently modify data # The architecture explained here implies a lot of object cloning (to compliy with the immutable objects paradigm). To achieve this in an efficient way, we use the immerjs library. The main resource is the produce function, that takes an object and perform a shallow copy, but preserving all parts that have not changed. Example of usage: import produce from \"immer\"; const someObject = { one: 1, two: 2, letters: [\"a\", \"b\", \"c\"] } const newObject = produce(someObject, draft => { draft.one = 11; draft.letters.push(\"d\"); }); // newObject is {one: 11, two: 2, letters: [\"a\", \"b\", \"c\", \"d\"]} // The structure of newObject shares any attribute that has not changed (in this case, `two`), // to save memory and processing time. Using events to change the state # Define a class that implements UpdateEvent , with an update method that does the work. Then (inside a dom event handler, for example), use the emit method of the store to queue it to be executed later, when all other processing have stopped. // SomeComponent/data.tsx import { UpdateEvent } from \"store/Event\"; import { GlobalState } from \"index\"; export class SetLoadingEvent implements UpdateEvent { public constructor(private loading: boolean) {} public update(state: GlobalState) { return produce(state, newState => { newState.loading = this.loading; }); } } // SomeComponent/index.tsx import { store } from \"index\"; import { SetLoadingEvent } from \"SomeComponent/data\"; window.onload(() => store.emit(new SetLoadingEvent(true))); In this example, after the onload event completely finishes, the global state is modified to set the loading variable to true. Then, the subscribers of this variable will be notified of the change (see below). Subscribing to state changes # The global state may be read synchronously, and it will give the current value at the moment it's read. But the usual way of reading it is not so, but subscribing to the state or to one part of it, and being notified whenever it changes. The Store class has a public member named state$ , that is a RX observable that you can subscribe to, and that emits the new state each time it's modified. import { store, GlobalState } from \"index\"; store.state$.subscribe((state: GlobalState) => { console.log(state.currentUser?.name); } But inside a React application, you usually will not need to subscribe directly to the state. Instead you'll use the useRef React hook . It's useful to subscribe to a subset of the state from a React component. You give it a function that selects the portion of the state you need, and the hook ensures that whenever this fragment changes, a componet repaint is triggered, with the value attached to a local variable. // SomeComponent/index.tsx import { useRef } from \"store/Store\"; import { store } from \"index\"; export default function SomeComponent() { const user = useRef(store, (state) => state.currentUser); return ( (user && <div class=\"user-block\"> <p>{ user.name }</p> <p>{ user.email }</p> </div>) ); } Using asynchronous events # Often, you will need to trigger some action that is not immediate, but have to wait for something (for example, ask the backend for some data, or set a timer). For this, you can use the WatchEvent . These kind of events also may be emitted, and have a function watch that receives the current global state value. But these ones return a RX observable, that emits one or more events before completting. The new events are then queued, to be executed when it's their turn. If the new events are UpdateEvents, the state will finally be modified. If they are also WatchEvents, more events will be queued in turn, extending the chain. import { UpdateEvent } from \"store/Event\"; import { GlobalState } from \"index\"; import { ajax } from \"rxjs/ajax\"; export class LoadUserEvent implements WatchEvent { public watch(state: GlobalState) { return ajax.getJSON(\"https://my.backend/api/current-user\").pipe( map((user) => new UserLoadedEvent(user)) ); } } class UserLoadedEvent implements UpdateEvent { public constructor(private user: object) {} public update(state: GlobalState) { return produce(state, newState => { newState.currentUser = this.user; }); } } An event may implement both UpdateEvent and WatchEvent . In this case, when the event is executed, the update function will be called first, and then watch will be called with the updated state. import { UpdateEvent } from \"store/Event\"; import { GlobalState } from \"index\"; import { ajax } from \"rxjs/ajax\"; export class LoadUserEvent implements UpdateEvent, WatchEvent { public update(state: GlobalState) { return produce(state, newState => { newState.loading = true; }); } public watch(state: GlobalState) { return ajax.getJSON(\"https://my.backend/api/current-user\").pipe( map((user) => new UserLoadedEvent(user)) ); } } class UserLoadedEvent implements UpdateEvent { public constructor(private user: object) {} public update(state: GlobalState) { return produce(state, newState => { newState.loading = false; newState.currentUser = this.user; }); } } // LoadingComponent/index.tsx import { useRef } from \"store/Store\"; import { store } from \"index\"; export default function LoadingComponent() { const loading = useRef(store, (state) => state.loading); return ( (loading && <div class=\"loading\"> <img src=\"spinner.gif\" /> </div>) ); } A third type of event is the EffectEvent . It's intended for when you need to trigger an external action (a 'side effect') but you don't need a return value. import { EffectEvent } from \"store/Event\"; import { GlobalState } from \"index\"; import { ajax } from \"rxjs/ajax\"; export class LogEntryEvent implements EffectEvent { public effect(state: GlobalState) { ajax.post(\"https://my.backend/api/log-entry\", JSON.stringify({ date: date.now(), user: state.user.username, })); } } Modularizing the global state # When the applicatoin grows, it's not a good idea to have all state in a big global object with all variables in the same level. Te suggestion is to have each submodule its own definition of the local state, the initial values and the selecte function, and to aggregate all modules in the global state. // index.ts import { Store } from \"store/Store\"; import { UserState, userInitial } from \"user/data\"; import { OtherState, otherInitial } from \"other/data\"; ... export interface GlobalState { user: UserState, other: OtherState, ... } export const store = newStore<GlobalState>({ user: userInitial, other: otherInitial, ... }); // User/data.tsx export interface UserState { loading: boolean, currentUser?: { username: string, name: string; email: string; } } export const userInitial = { loading: false, currentUser: null, }; export getUser = (state) => state.user; // User/index.tsx import { useRef } from \"store/Store\"; import { store } from \"index\"; import { getUser } from \"./data\"; export default function SomeComponent() { const user = useRef(store, (state) => state.getUser().currentUser); return ( (user && <div class=\"user-block\"> <p>{ user.name }</p> <p>{ user.email }</p> </div>) ); }","title":"Store"},{"location":"English/store/#store","text":"A typical problem in web applications is how to share data between unrelated web components in one page. When a component is a child of another one, the parent may pass info with the properties. But if components that want to share data are scattered around the page, the question is more difficult. In addition, when the interacions become more complex, a change of one piece of data, often triggers further changes elsewhere. Without care, this may lead to infinite loops or race conditions. There are a number of solutions for these problems. Here we use the Store module, inspired in Redux but much simpler to use, although quite powerful. It's based in two main contents: The Store holds a global state of the application. A tree of objects that may be changed by any component, and subscribed by any one to be notified of the changes. The Event stream. When any component wants to modify the state, it does not directly write to the Store. Instead, emits an Event , that is queued and executed only when all other processes are finished. The event is an object with a function that receives the global state, and returns a new state with the desired changes. This way, loops and race conditions are avoided, the state being stable while any javascript event or component redraw is being executed.","title":"Store"},{"location":"English/store/#declaring-the-global-state","text":"Define an interface with all the variables you need inside the global state. Then, declare ain instance of Store , generated from the given interface and with the initial data, and exported to be accessible from anywhere in the app: // index.tsx import { Store } from \"store/Store\"; export interface GlobalState { loading: boolean, currentUser?: { username: string, name: string; email: string; } } export const store = new Store<GlobalState>({ loading: false, currentUser: null, });","title":"Declaring the global state"},{"location":"English/store/#using-immer-to-efficiently-modify-data","text":"The architecture explained here implies a lot of object cloning (to compliy with the immutable objects paradigm). To achieve this in an efficient way, we use the immerjs library. The main resource is the produce function, that takes an object and perform a shallow copy, but preserving all parts that have not changed. Example of usage: import produce from \"immer\"; const someObject = { one: 1, two: 2, letters: [\"a\", \"b\", \"c\"] } const newObject = produce(someObject, draft => { draft.one = 11; draft.letters.push(\"d\"); }); // newObject is {one: 11, two: 2, letters: [\"a\", \"b\", \"c\", \"d\"]} // The structure of newObject shares any attribute that has not changed (in this case, `two`), // to save memory and processing time.","title":"Using immer to efficiently modify data"},{"location":"English/store/#using-events-to-change-the-state","text":"Define a class that implements UpdateEvent , with an update method that does the work. Then (inside a dom event handler, for example), use the emit method of the store to queue it to be executed later, when all other processing have stopped. // SomeComponent/data.tsx import { UpdateEvent } from \"store/Event\"; import { GlobalState } from \"index\"; export class SetLoadingEvent implements UpdateEvent { public constructor(private loading: boolean) {} public update(state: GlobalState) { return produce(state, newState => { newState.loading = this.loading; }); } } // SomeComponent/index.tsx import { store } from \"index\"; import { SetLoadingEvent } from \"SomeComponent/data\"; window.onload(() => store.emit(new SetLoadingEvent(true))); In this example, after the onload event completely finishes, the global state is modified to set the loading variable to true. Then, the subscribers of this variable will be notified of the change (see below).","title":"Using events to change the state"},{"location":"English/store/#subscribing-to-state-changes","text":"The global state may be read synchronously, and it will give the current value at the moment it's read. But the usual way of reading it is not so, but subscribing to the state or to one part of it, and being notified whenever it changes. The Store class has a public member named state$ , that is a RX observable that you can subscribe to, and that emits the new state each time it's modified. import { store, GlobalState } from \"index\"; store.state$.subscribe((state: GlobalState) => { console.log(state.currentUser?.name); } But inside a React application, you usually will not need to subscribe directly to the state. Instead you'll use the useRef React hook . It's useful to subscribe to a subset of the state from a React component. You give it a function that selects the portion of the state you need, and the hook ensures that whenever this fragment changes, a componet repaint is triggered, with the value attached to a local variable. // SomeComponent/index.tsx import { useRef } from \"store/Store\"; import { store } from \"index\"; export default function SomeComponent() { const user = useRef(store, (state) => state.currentUser); return ( (user && <div class=\"user-block\"> <p>{ user.name }</p> <p>{ user.email }</p> </div>) ); }","title":"Subscribing to state changes"},{"location":"English/store/#using-asynchronous-events","text":"Often, you will need to trigger some action that is not immediate, but have to wait for something (for example, ask the backend for some data, or set a timer). For this, you can use the WatchEvent . These kind of events also may be emitted, and have a function watch that receives the current global state value. But these ones return a RX observable, that emits one or more events before completting. The new events are then queued, to be executed when it's their turn. If the new events are UpdateEvents, the state will finally be modified. If they are also WatchEvents, more events will be queued in turn, extending the chain. import { UpdateEvent } from \"store/Event\"; import { GlobalState } from \"index\"; import { ajax } from \"rxjs/ajax\"; export class LoadUserEvent implements WatchEvent { public watch(state: GlobalState) { return ajax.getJSON(\"https://my.backend/api/current-user\").pipe( map((user) => new UserLoadedEvent(user)) ); } } class UserLoadedEvent implements UpdateEvent { public constructor(private user: object) {} public update(state: GlobalState) { return produce(state, newState => { newState.currentUser = this.user; }); } } An event may implement both UpdateEvent and WatchEvent . In this case, when the event is executed, the update function will be called first, and then watch will be called with the updated state. import { UpdateEvent } from \"store/Event\"; import { GlobalState } from \"index\"; import { ajax } from \"rxjs/ajax\"; export class LoadUserEvent implements UpdateEvent, WatchEvent { public update(state: GlobalState) { return produce(state, newState => { newState.loading = true; }); } public watch(state: GlobalState) { return ajax.getJSON(\"https://my.backend/api/current-user\").pipe( map((user) => new UserLoadedEvent(user)) ); } } class UserLoadedEvent implements UpdateEvent { public constructor(private user: object) {} public update(state: GlobalState) { return produce(state, newState => { newState.loading = false; newState.currentUser = this.user; }); } } // LoadingComponent/index.tsx import { useRef } from \"store/Store\"; import { store } from \"index\"; export default function LoadingComponent() { const loading = useRef(store, (state) => state.loading); return ( (loading && <div class=\"loading\"> <img src=\"spinner.gif\" /> </div>) ); } A third type of event is the EffectEvent . It's intended for when you need to trigger an external action (a 'side effect') but you don't need a return value. import { EffectEvent } from \"store/Event\"; import { GlobalState } from \"index\"; import { ajax } from \"rxjs/ajax\"; export class LogEntryEvent implements EffectEvent { public effect(state: GlobalState) { ajax.post(\"https://my.backend/api/log-entry\", JSON.stringify({ date: date.now(), user: state.user.username, })); } }","title":"Using asynchronous events"},{"location":"English/store/#modularizing-the-global-state","text":"When the applicatoin grows, it's not a good idea to have all state in a big global object with all variables in the same level. Te suggestion is to have each submodule its own definition of the local state, the initial values and the selecte function, and to aggregate all modules in the global state. // index.ts import { Store } from \"store/Store\"; import { UserState, userInitial } from \"user/data\"; import { OtherState, otherInitial } from \"other/data\"; ... export interface GlobalState { user: UserState, other: OtherState, ... } export const store = newStore<GlobalState>({ user: userInitial, other: otherInitial, ... }); // User/data.tsx export interface UserState { loading: boolean, currentUser?: { username: string, name: string; email: string; } } export const userInitial = { loading: false, currentUser: null, }; export getUser = (state) => state.user; // User/index.tsx import { useRef } from \"store/Store\"; import { store } from \"index\"; import { getUser } from \"./data\"; export default function SomeComponent() { const user = useRef(store, (state) => state.getUser().currentUser); return ( (user && <div class=\"user-block\"> <p>{ user.name }</p> <p>{ user.email }</p> </div>) ); }","title":"Modularizing the global state"}]}